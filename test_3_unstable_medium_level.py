#!/usr/bin/env python3
"""
–ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —Ç–µ—Å—Ç–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö –¥–ª—è —Å—Ü–µ–Ω–∞—Ä—ñ—é 3:
–°–µ—Ä–µ–¥–Ω—ñ–π —Ä—ñ–≤–µ–Ω—å: —á–∞—Å—Ç–∫–æ–≤–∏–π –ø—Ä–æ–≥—Ä–µ—Å, –∞–ª–µ —î –Ω–µ—Å—Ç–∞–±—ñ–ª—å–Ω—ñ—Å—Ç—å —É —Å–Ω—ñ —Ç–∞ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è—Ö, 
—Å–∞–º–æ–ø–æ—á—É—Ç—Ç—è –ø–∞–¥–∞—î. –í–∞–≥–∞ –≤ –Ω–æ—Ä–º—ñ.
–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –¥–ª—è –∞–∫—Ü–µ–Ω—Ç—É –Ω–∞ –±–∞–ª–∞–Ω—Å (—Å–æ–Ω, —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è, –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è).
"""

import asyncio
from datetime import datetime, timedelta
from app.db.database import init_db
from app.db.models import (
    User, MorningQuiz, TrainingSession, UserStatistics, 
    PeriodType, TrainingGoal
)
from zoneinfo import ZoneInfo

async def create_unstable_medium_level_scenario():
    """
    –°—Ü–µ–Ω–∞—Ä—ñ–π 3: –°–µ—Ä–µ–¥–Ω—ñ–π —Ä—ñ–≤–µ–Ω—å –∑ –Ω–µ—Å—Ç–∞–±—ñ–ª—å–Ω—ñ—Å—Ç—é
    –ß–∞—Å—Ç–∫–æ–≤–∏–π –ø—Ä–æ–≥—Ä–µ—Å, –Ω–µ—Å—Ç–∞–±—ñ–ª—å–Ω–∏–π —Å–æ–Ω/—Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è, –ø–∞–¥—ñ–Ω–Ω—è —Å–∞–º–æ–ø–æ—á—É—Ç—Ç—è, –Ω–æ—Ä–º–∞–ª—å–Ω–∞ –≤–∞–≥–∞
    """
    await init_db()
    
    test_user_id = "unstable_medium_user"
    
    # –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑ —Ü—ñ–ª–ª—é –ø—ñ–¥—Ç—Ä–∏–º–∫–∏ —Ñ–æ—Ä–º–∏
    test_user = User(
        telegram_id=test_user_id,
        full_name="–ù–µ—Å—Ç–∞–±—ñ–ª—å–Ω–∏–π –°–µ—Ä–µ–¥–Ω—ñ–π –†—ñ–≤–µ–Ω—å",
        telegram_username="unstable_medium",
        is_active=True,
        is_verified=True,
        training_goal=TrainingGoal.MAINTAIN_FITNESS
    )
    await test_user.save()
    print(f"‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: {test_user.full_name}")
    
    # –ü–µ—Ä—ñ–æ–¥ (22 –≤–µ—Ä–µ—Å–Ω—è 2025, 21:21)
    start_date = datetime(2025, 10, 6, 21, 9, tzinfo=ZoneInfo("Europe/Kyiv"))
    
    # –î–∞–Ω—ñ –¥–ª—è –Ω–µ—Å—Ç–∞–±—ñ–ª—å–Ω–æ–≥–æ —Å–µ—Ä–µ–¥–Ω—å–æ–≥–æ —Ä—ñ–≤–Ω—è (7 –¥–Ω—ñ–≤)
    daily_data = [
        # –î–µ–Ω—å 1 - –¥–æ–±—Ä–∏–π —Å—Ç–∞—Ä—Ç
        {"stress": 4, "sleep": 8.0, "wellbeing": 7, "training": 7, "weight": 70.0},
        # –î–µ–Ω—å 2 - –Ω–µ—Å—Ç–∞–±—ñ–ª—å–Ω—ñ—Å—Ç—å —Å–Ω—É
        {"stress": 5, "sleep": 5.0, "wellbeing": 6, "training": 8, "weight": 70.1},
        # –î–µ–Ω—å 3 - –ø—Ä–æ–≤–∞–ª —É —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è—Ö
        {"stress": 3, "sleep": 7.5, "wellbeing": 6, "training": 3, "weight": 69.9},
        # –î–µ–Ω—å 4 - –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è, –∞–ª–µ —Å–∞–º–æ–ø–æ—á—É—Ç—Ç—è –ø–∞–¥–∞—î
        {"stress": 4, "sleep": 6.5, "wellbeing": 5, "training": 7, "weight": 70.0},
        # –î–µ–Ω—å 5 - –∑–Ω–æ–≤—É –Ω–µ—Å—Ç–∞–±—ñ–ª—å–Ω—ñ—Å—Ç—å
        {"stress": 6, "sleep": 4.5, "wellbeing": 4, "training": 6, "weight": 70.2},
        # –î–µ–Ω—å 6 - —á–∞—Å—Ç–∫–æ–≤–µ –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è
        {"stress": 3, "sleep": 8.5, "wellbeing": 5, "training": 4, "weight": 69.8},
        # –î–µ–Ω—å 7 - –∫–æ–ª–∏–≤–∞–Ω–Ω—è –ø—Ä–æ–¥–æ–≤–∂—É—é—Ç—å—Å—è
        {"stress": 5, "sleep": 6.0, "wellbeing": 4, "training": 6, "weight": 70.0}
    ]
    
    training_sessions_count = 0
    morning_quizzes_count = 0
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ –¥–∞–Ω—ñ –ø–æ –¥–Ω—è—Ö
    for day, data in enumerate(daily_data):
        current_date = start_date + timedelta(days=day)
        
        # –†–∞–Ω–∫–æ–≤—ñ –∫–≤—ñ–∑–∏ –∑—ñ —Å—Ç–∞–±—ñ–ª—å–Ω–æ—é –≤–∞–≥–æ—é
        morning_quiz = MorningQuiz(
            user_id=test_user_id,
            how_do_you_feel_today=data["wellbeing"],
            how_many_hours_of_sleep=data["sleep"],
            weight=data["weight"],
            is_going_to_gym=data["training"] > 3,
            gym_attendance_time=current_date.replace(hour=18, minute=0) if data["training"] > 3 else None,
            completed=True,
            created_at=current_date.replace(hour=8, minute=0)
        )
        await morning_quiz.save()
        morning_quizzes_count += 1
        
        # –ù–µ—Å—Ç–∞–±—ñ–ª—å–Ω—ñ —Ç—Ä–µ–Ω—É–≤–∞–ª—å–Ω—ñ —Å–µ—Å—ñ—ó
        if data["training"] > 3:  # –ü—Ä–æ–ø—É—Å–∫–∞—î —Å–ª–∞–±–∫—ñ –¥–Ω—ñ
            training_session = TrainingSession(
                user_id=test_user_id,
                how_do_you_feel_before=data["wellbeing"],
                how_hard_was_training=data["training"],
                do_you_have_any_pain=False,
                training_started_at=current_date.replace(hour=18, minute=0),
                training_ended_at=current_date.replace(hour=19, minute=0 if data["training"] < 6 else 30),
                training_duration=60 if data["training"] < 6 else 90,
                stress_level=data["stress"],
                do_you_have_soreness=data["training"] > 7,
                completed=True,
                created_at=current_date.replace(hour=18, minute=0)
            )
            await training_session.save()
            training_sessions_count += 1
    
    print(f"‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ {morning_quizzes_count} —Ä–∞–Ω–∫–æ–≤–∏—Ö –∫–≤—ñ–∑—ñ–≤")
    print(f"‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ {training_sessions_count} —Ç—Ä–µ–Ω—É–≤–∞–ª—å–Ω–∏—Ö —Å–µ—Å—ñ–π (–ø—Ä–æ–ø—É—â–µ–Ω–æ {7-training_sessions_count})")
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    end_date = start_date + timedelta(days=6, hours=23, minutes=59, seconds=59)
    
    # –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ –º–µ—Ç—Ä–∏–∫–∏
    stress_avg = sum(d["stress"] for d in daily_data) / len(daily_data)  # 4.3
    sleep_avg = sum(d["sleep"] for d in daily_data) / len(daily_data)    # 6.6
    wellbeing_avg = sum(d["wellbeing"] for d in daily_data) / len(daily_data)  # 5.3
    training_avg = sum(d["training"] for d in daily_data) / len(daily_data)    # 5.9
    
    start_weight = daily_data[0]["weight"]
    end_weight = daily_data[-1]["weight"]
    weight_change = end_weight - start_weight  # 0.0
    
    user_statistics = UserStatistics(
        user_id=test_user_id,
        period_type=PeriodType.WEEKLY,
        period_start=start_date,
        period_end=end_date,
        total_training_sessions=training_sessions_count,
        total_morning_quizzes=morning_quizzes_count,
        
        # –°—Ç—Ä–µ—Å: –ø–æ–º—ñ—Ä–Ω–∏–π 4.3, –∫–æ–ª–∏–≤–∞—î—Ç—å—Å—è 3-6
        stress_data={
            "chart_type": "line",
            "average": 4.3,
            "trend": "unstable",
            "data_points": [
                {"date": (start_date + timedelta(days=i)).strftime("%Y-%m-%d"), "value": daily_data[i]["stress"]}
                for i in range(len(daily_data))
            ]
        },
        
        # –¢—Ä–µ–Ω—É–≤–∞–Ω–Ω—è: –Ω–µ—Å—Ç–∞–±—ñ–ª—å–Ω—ñ 5.9, —î –ø—Ä–æ–≤–∞–ª –¥–æ 3
        warehouse_data={
            "chart_type": "bar",
            "average": 5.9,
            "trend": "unstable",
            "data_points": [
                {"date": (start_date + timedelta(days=i)).strftime("%Y-%m-%d"), "value": daily_data[i]["training"]}
                for i in range(len(daily_data))
            ]
        },
        
        # –°–æ–Ω: –Ω–µ—Å—Ç–∞–±—ñ–ª—å–Ω–∏–π 6.6 –≥–æ–¥–∏–Ω, –∫–æ–ª–∏–≤–∞–Ω–Ω—è 4.5-8.5
        sleep_data={
            "chart_type": "line",
            "average": 6.6,
            "trend": "unstable",
            "total_sleep_hours": sum(d["sleep"] for d in daily_data),
            "data_points": [
                {"date": (start_date + timedelta(days=i)).strftime("%Y-%m-%d"), "value": daily_data[i]["sleep"]}
                for i in range(len(daily_data))
            ]
        },
        
        # –°–∞–º–æ–ø–æ—á—É—Ç—Ç—è: –ø–∞–¥–∞—î –∑ 7 –¥–æ 4, —Å–µ—Ä–µ–¥–Ω—î 5.3
        wellbeing_data={
            "chart_type": "line",
            "average": 5.3,
            "trend": "decreasing",
            "data_points": [
                {"date": (start_date + timedelta(days=i)).strftime("%Y-%m-%d"), "value": daily_data[i]["wellbeing"]}
                for i in range(len(daily_data))
            ]
        },
        
        # –í–∞–≥–∞: —Å—Ç–∞–±—ñ–ª—å–Ω–∞ –≤ –Ω–æ—Ä–º—ñ ¬±0.2–∫–≥
        weight_data={
            "chart_type": "line",
            "average": round((start_weight + end_weight) / 2, 1),
            "trend": "stable",
            "start_weight": start_weight,
            "end_weight": end_weight,
            "weight_change": round(weight_change, 1),
            "data_points": [
                {"date": (start_date + timedelta(days=i)).strftime("%Y-%m-%d"), "value": daily_data[i]["weight"]}
                for i in range(len(daily_data))
            ]
        },
        
        is_complete=True,
        generated_at=datetime.now(ZoneInfo("Europe/Kyiv"))
    )
    
    await user_statistics.save()
    print(f"‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –ø–µ—Ä—ñ–æ–¥—É {start_date.date()} - {end_date.date()}")
    
    # –í–∏–≤–æ–¥–∏–º–æ –ø—ñ–¥—Å—É–º–æ–∫
    print(f"""
üìä –°—Ü–µ–Ω–∞—Ä—ñ–π 3 - –ù–µ—Å—Ç–∞–±—ñ–ª—å–Ω–∏–π —Å–µ—Ä–µ–¥–Ω—ñ–π —Ä—ñ–≤–µ–Ω—å:
üßò‚Äç‚ôÇÔ∏è –°–µ—Ä–µ–¥–Ω—ñ–π —Å—Ç—Ä–µ—Å: {stress_avg:.1f} (–ø–æ–º—ñ—Ä–Ω–∏–π, –∫–æ–ª–∏–≤–∞—î—Ç—å—Å—è)
üí™ –°–∫–ª–∞–¥–Ω—ñ—Å—Ç—å —Ç—Ä–µ–Ω—É–≤–∞–Ω—å: {training_avg:.1f} (–Ω–µ—Å—Ç–∞–±—ñ–ª—å–Ω—ñ, —î –ø—Ä–æ–≤–∞–ª–∏)
üò¥ –°–µ—Ä–µ–¥–Ω—ñ–π —Å–æ–Ω: {sleep_avg:.1f} –≥–æ–¥–∏–Ω (–Ω–µ—Å—Ç–∞–±—ñ–ª—å–Ω–∏–π 4.5-8.5)
üòÑ –ó–∞–≥–∞–ª—å–Ω–µ —Å–∞–º–æ–ø–æ—á—É—Ç—Ç—è: {wellbeing_avg:.1f} (–ø–∞–¥–∞—î –∑ 7 –¥–æ 4)
üî• –ó–º—ñ–Ω–∞ –≤–∞–≥–∏: {weight_change:.1f} –∫–≥ (—Å—Ç–∞–±—ñ–ª—å–Ω–∞ –≤ –Ω–æ—Ä–º—ñ)
üéØ –¶—ñ–ª—å: {test_user.training_goal.value}

–û—á—ñ–∫—É–≤–∞–Ω–∏–π –∞–Ω–∞–ª—ñ–∑: –∞–∫—Ü–µ–Ω—Ç –Ω–∞ –Ω–µ—Å—Ç–∞–±—ñ–ª—å–Ω—ñ—Å—Ç—å —ñ –ø–æ—Ç—Ä–µ–±—É –≤ –±–∞–ª–∞–Ω—Å—ñ
–º—ñ–∂ —Å–Ω–æ–º, —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è–º–∏ —Ç–∞ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è–º
""")

if __name__ == "__main__":
    print("–ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —Ç–µ—Å—Ç–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö –¥–ª—è –°—Ü–µ–Ω–∞—Ä—ñ—é 3 (–ù–µ—Å—Ç–∞–±—ñ–ª—å–Ω–∏–π —Å–µ—Ä–µ–¥–Ω—ñ–π —Ä—ñ–≤–µ–Ω—å)...")
    asyncio.run(create_unstable_medium_level_scenario())
    print("‚úÖ –°—Ü–µ–Ω–∞—Ä—ñ–π 3 –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")