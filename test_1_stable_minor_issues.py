#!/usr/bin/env python3
"""
–ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —Ç–µ—Å—Ç–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö –¥–ª—è —Å—Ü–µ–Ω–∞—Ä—ñ—é 1:
–ó–∞–≥–∞–ª–æ–º —Å—Ç–∞–±—ñ–ª—å–Ω—ñ –ø–æ–∫–∞–∑–Ω–∏–∫–∏ –∑ –Ω–µ–≤–µ–ª–∏–∫–∏–º–∏ –ø—Ä–æ–±–ª–µ–º–∞–º–∏.
–°—Ç—Ä–µ—Å —Ç—Ä–æ—Ö–∏ –∑—Ä–æ—Å—Ç–∞—î, —Å–æ–Ω —Å—Ç–∞–±—ñ–ª—å–Ω–∏–π –∞–ª–µ –∫–æ—Ä–æ—Ç–∫–∏–π, —Å–∞–º–æ–ø–æ—á—É—Ç—Ç—è —Å–ª–∞–±–∫–µ, –≤–∞–≥–∞ —Ç—Ä–æ—Ö–∏ –≤–∏—Ä–æ—Å–ª–∞.
–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –¥–ª—è —Å–ø–æ–∫—ñ–π–Ω–æ—ó –∑–±–∞–ª–∞–Ω—Å–æ–≤–∞–Ω–æ—ó –æ—Ü—ñ–Ω–∫–∏: –ø–æ—Ö–≤–∞–ª–∞ + –ª–µ–≥–∫–∞ –∫—Ä–∏—Ç–∏–∫–∞ + –ø–æ—Ä–∞–¥–∞ –ø–æ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—é.
"""

import asyncio
from datetime import datetime, timedelta
from app.db.database import init_db
from app.db.models import (
    User, MorningQuiz, TrainingSession, UserStatistics, 
    PeriodType, TrainingGoal
)
from zoneinfo import ZoneInfo

async def create_stable_with_minor_issues_scenario():
    """
    –°—Ü–µ–Ω–∞—Ä—ñ–π 1: –°—Ç–∞–±—ñ–ª—å–Ω—ñ –ø–æ–∫–∞–∑–Ω–∏–∫–∏ –∑ –Ω–µ–≤–µ–ª–∏–∫–∏–º–∏ –ø—Ä–æ–±–ª–µ–º–∞–º–∏
    –°—Ç—Ä–µ—Å –∑—Ä–æ—Å—Ç–∞—î (2‚Üí5), –∫–æ—Ä–æ—Ç–∫–∏–π —Å–æ–Ω (6.0), —Å–ª–∞–±–∫–µ —Å–∞–º–æ–ø–æ—á—É—Ç—Ç—è (4.8), –ª–µ–≥–∫–∏–π –Ω–∞–±—ñ—Ä –≤–∞–≥–∏ (+0.8–∫–≥)
    """
    await init_db()
    
    test_user_id = "stable_minor_issues_user"
    
    # –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑ —Ü—ñ–ª–ª—é —Å—Ö—É–¥–Ω–µ–Ω–Ω—è
    test_user = User(
        telegram_id=test_user_id,
        full_name="–°—Ç–∞–±—ñ–ª—å–Ω—ñ –ü–æ–∫–∞–∑–Ω–∏–∫–∏ –ó –ü—Ä–æ–±–ª–µ–º–∞–º–∏",
        telegram_username="stable_minor_issues",
        is_active=True,
        is_verified=True,
        training_goal=TrainingGoal.LOSE_WEIGHT
    )
    await test_user.save()
    print(f"‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: {test_user.full_name}")
    
    # –ü–µ—Ä—ñ–æ–¥ (22 –≤–µ—Ä–µ—Å–Ω—è 2025, 21:09)
    start_date = datetime(2025, 10, 6, 21, 9, tzinfo=ZoneInfo("Europe/Kyiv"))
    
    # –î–∞–Ω—ñ –¥–ª—è —Å—Ç–∞–±—ñ–ª—å–Ω–æ–≥–æ —Ç–∏–∂–Ω—è –∑ –Ω–µ–≤–µ–ª–∏–∫–∏–º–∏ –ø—Ä–æ–±–ª–µ–º–∞–º–∏ (7 –¥–Ω—ñ–≤)
    daily_data = [
        # –î–µ–Ω—å 1 - —Å—Ç—Ä–µ—Å –Ω–∏–∑—å–∫–∏–π, –≤—Å–µ –æ–∫
        {"stress": 2, "sleep": 6.5, "wellbeing": 6, "training": 7, "weight": 73.0},
        # –î–µ–Ω—å 2 - —Å—Ç—Ä–µ—Å –ø–æ—á–∏–Ω–∞—î —Ä–æ—Å—Ç–∏
        {"stress": 3, "sleep": 6.0, "wellbeing": 5, "training": 6, "weight": 73.2},
        # –î–µ–Ω—å 3 - —Å—Ç—Ä–µ—Å –ø—Ä–æ–¥–æ–≤–∂—É—î —Ä–æ—Å—Ç–∏, —Å–æ–Ω –∫–æ—Ä–æ—Ç—à–∞—î
        {"stress": 4, "sleep": 5.5, "wellbeing": 5, "training": 7, "weight": 73.4},
        # –î–µ–Ω—å 4 - –ø—ñ–∫ —Å—Ç—Ä–µ—Å—É
        {"stress": 5, "sleep": 6.0, "wellbeing": 4, "training": 6, "weight": 73.5},
        # –î–µ–Ω—å 5 - —Å—Ç—Ä–µ—Å —Å—Ç–∞–±—ñ–ª—ñ–∑—É—î—Ç—å—Å—è
        {"stress": 5, "sleep": 6.0, "wellbeing": 4, "training": 7, "weight": 73.6},
        # –î–µ–Ω—å 6 - —Å–∞–º–æ–ø–æ—á—É—Ç—Ç—è –ø–æ–≥—ñ—Ä—à—É—î—Ç—å—Å—è
        {"stress": 4, "sleep": 6.5, "wellbeing": 4, "training": 6, "weight": 73.7},
        # –î–µ–Ω—å 7 - –ª–µ–≥–∫–µ –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è
        {"stress": 3, "sleep": 6.0, "wellbeing": 5, "training": 7, "weight": 73.8}
    ]
    
    training_sessions_count = 0
    morning_quizzes_count = 0
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ –¥–∞–Ω—ñ –ø–æ –¥–Ω—è—Ö
    for day, data in enumerate(daily_data):
        current_date = start_date + timedelta(days=day)
        
        # –†–∞–Ω–∫–æ–≤—ñ –∫–≤—ñ–∑–∏ –∑ –ø–æ—Å—Ç—É–ø–æ–≤–∏–º –Ω–∞–±–æ—Ä–æ–º –≤–∞–≥–∏
        morning_quiz = MorningQuiz(
            user_id=test_user_id,
            how_do_you_feel_today=data["wellbeing"],
            how_many_hours_of_sleep=data["sleep"],
            weight=data["weight"],
            is_going_to_gym=True,
            gym_attendance_time=current_date.replace(hour=18, minute=0),
            completed=True,
            created_at=current_date.replace(hour=8, minute=0)
        )
        await morning_quiz.save()
        morning_quizzes_count += 1
        
        # –°—Ç–∞–±—ñ–ª—å–Ω—ñ —Ç—Ä–µ–Ω—É–≤–∞–ª—å–Ω—ñ —Å–µ—Å—ñ—ó
        training_session = TrainingSession(
            user_id=test_user_id,
            how_do_you_feel_before=data["wellbeing"],
            how_hard_was_training=data["training"],
            do_you_have_any_pain=False,
            training_started_at=current_date.replace(hour=18, minute=0),
            training_ended_at=current_date.replace(hour=19, minute=15),
            training_duration=75,
            stress_level=data["stress"],
            do_you_have_soreness=False,
            completed=True,
            created_at=current_date.replace(hour=18, minute=0)
        )
        await training_session.save()
        training_sessions_count += 1
    
    print(f"‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ {morning_quizzes_count} —Ä–∞–Ω–∫–æ–≤–∏—Ö –∫–≤—ñ–∑—ñ–≤")
    print(f"‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ {training_sessions_count} —Ç—Ä–µ–Ω—É–≤–∞–ª—å–Ω–∏—Ö —Å–µ—Å—ñ–π")
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    end_date = start_date + timedelta(days=6, hours=23, minutes=59, seconds=59)
    
    # –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ –º–µ—Ç—Ä–∏–∫–∏
    stress_avg = sum(d["stress"] for d in daily_data) / len(daily_data)  # 3.7
    sleep_avg = sum(d["sleep"] for d in daily_data) / len(daily_data)    # 6.0
    wellbeing_avg = sum(d["wellbeing"] for d in daily_data) / len(daily_data)  # 4.8
    training_avg = sum(d["training"] for d in daily_data) / len(daily_data)    # 6.6
    
    start_weight = daily_data[0]["weight"]
    end_weight = daily_data[-1]["weight"]
    weight_change = end_weight - start_weight  # +0.8
    
    user_statistics = UserStatistics(
        user_id=test_user_id,
        period_type=PeriodType.WEEKLY,
        period_start=start_date,
        period_end=end_date,
        total_training_sessions=training_sessions_count,
        total_morning_quizzes=morning_quizzes_count,
        
        # –°—Ç—Ä–µ—Å: —Å–µ—Ä–µ–¥–Ω—ñ–π 3.7, –∑—Ä–æ—Å—Ç–∞—î –∑ 2 –¥–æ 5
        stress_data={
            "chart_type": "line",
            "average": 3.7,
            "trend": "increasing",
            "data_points": [
                {"date": (start_date + timedelta(days=i)).strftime("%Y-%m-%d"), "value": daily_data[i]["stress"]}
                for i in range(len(daily_data))
            ]
        },
        
        # –¢—Ä–µ–Ω—É–≤–∞–Ω–Ω—è: —Å—Ç–∞–±—ñ–ª—å–Ω—ñ 6.6
        warehouse_data={
            "chart_type": "bar",
            "average": 6.6,
            "trend": "stable",
            "data_points": [
                {"date": (start_date + timedelta(days=i)).strftime("%Y-%m-%d"), "value": daily_data[i]["training"]}
                for i in range(len(daily_data))
            ]
        },
        
        # –°–æ–Ω: –∫–æ—Ä–æ—Ç–∫–∏–π 6.0 –≥–æ–¥–∏–Ω, —Å—Ç–∞–±—ñ–ª—å–Ω–∏–π –∞–ª–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–Ω—ñ–π
        sleep_data={
            "chart_type": "line",
            "average": 6.0,
            "trend": "stable",
            "total_sleep_hours": sum(d["sleep"] for d in daily_data),
            "data_points": [
                {"date": (start_date + timedelta(days=i)).strftime("%Y-%m-%d"), "value": daily_data[i]["sleep"]}
                for i in range(len(daily_data))
            ]
        },
        
        # –°–∞–º–æ–ø–æ—á—É—Ç—Ç—è: —Å–ª–∞–±–∫–µ 4.8, –∫–æ–ª–∏–≤–∞—î—Ç—å—Å—è –º—ñ–∂ 4-6
        wellbeing_data={
            "chart_type": "line",
            "average": 4.8,
            "trend": "decreasing",
            "data_points": [
                {"date": (start_date + timedelta(days=i)).strftime("%Y-%m-%d"), "value": daily_data[i]["wellbeing"]}
                for i in range(len(daily_data))
            ]
        },
        
        # –í–∞–≥–∞: –ª–µ–≥–∫–∏–π –Ω–∞–±—ñ—Ä +0.8 –∫–≥
        weight_data={
            "chart_type": "line",
            "average": round((start_weight + end_weight) / 2, 1),
            "trend": "increasing",
            "start_weight": start_weight,
            "end_weight": end_weight,
            "weight_change": round(weight_change, 1),
            "data_points": [
                {"date": (start_date + timedelta(days=i)).strftime("%Y-%m-%d"), "value": daily_data[i]["weight"]}
                for i in range(len(daily_data))
            ]
        },
        
        is_complete=True,
        generated_at=datetime.now(ZoneInfo("Europe/Kyiv"))
    )
    
    await user_statistics.save()
    print(f"‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –ø–µ—Ä—ñ–æ–¥—É {start_date.date()} - {end_date.date()}")
    
    # –í–∏–≤–æ–¥–∏–º–æ –ø—ñ–¥—Å—É–º–æ–∫
    print(f"""
üìä –°—Ü–µ–Ω–∞—Ä—ñ–π 1 - –°—Ç–∞–±—ñ–ª—å–Ω—ñ –ø–æ–∫–∞–∑–Ω–∏–∫–∏ –∑ –Ω–µ–≤–µ–ª–∏–∫–∏–º–∏ –ø—Ä–æ–±–ª–µ–º–∞–º–∏:
üßò‚Äç‚ôÇÔ∏è –°–µ—Ä–µ–¥–Ω—ñ–π —Å—Ç—Ä–µ—Å: {stress_avg:.1f} (–∑—Ä–æ—Å—Ç–∞—î –∑ 2 –¥–æ 5)
üí™ –°–∫–ª–∞–¥–Ω—ñ—Å—Ç—å —Ç—Ä–µ–Ω—É–≤–∞–Ω—å: {training_avg:.1f} (—Å—Ç–∞–±—ñ–ª—å–Ω—ñ)
üò¥ –°–µ—Ä–µ–¥–Ω—ñ–π —Å–æ–Ω: {sleep_avg:.1f} –≥–æ–¥–∏–Ω (–∫–æ—Ä–æ—Ç–∫–∏–π –∞–ª–µ —Å—Ç–∞–±—ñ–ª—å–Ω–∏–π)
üòÑ –ó–∞–≥–∞–ª—å–Ω–µ —Å–∞–º–æ–ø–æ—á—É—Ç—Ç—è: {wellbeing_avg:.1f} (—Å–ª–∞–±–∫–µ, –∫–æ–ª–∏–≤–∞—î—Ç—å—Å—è)
üî• –ó–º—ñ–Ω–∞ –≤–∞–≥–∏: +{weight_change:.1f} –∫–≥ (–ª–µ–≥–∫–∏–π –Ω–∞–±—ñ—Ä)
üéØ –¶—ñ–ª—å: {test_user.training_goal.value}

–û—á—ñ–∫—É–≤–∞–Ω–∏–π –∞–Ω–∞–ª—ñ–∑: —Å–ø–æ–∫—ñ–π–Ω–∞ –∑–±–∞–ª–∞–Ω—Å–æ–≤–∞–Ω–∞ –æ—Ü—ñ–Ω–∫–∞ –∑ –ø–æ—Ö–≤–∞–ª–æ—é –∑–∞ —Å—Ç–∞–±—ñ–ª—å–Ω—ñ—Å—Ç—å
—Ç—Ä–µ–Ω—É–≤–∞–Ω—å + –ª–µ–≥–∫–∞ –∫—Ä–∏—Ç–∏–∫–∞ —Å—Ç—Ä–µ—Å—É —Ç–∞ —Å–Ω—É + –ø–æ—Ä–∞–¥–∞ –ø–æ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—é
""")

if __name__ == "__main__":
    print("–ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —Ç–µ—Å—Ç–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö –¥–ª—è –°—Ü–µ–Ω–∞—Ä—ñ—é 1 (–°—Ç–∞–±—ñ–ª—å–Ω—ñ –ø–æ–∫–∞–∑–Ω–∏–∫–∏ –∑ –Ω–µ–≤–µ–ª–∏–∫–∏–º–∏ –ø—Ä–æ–±–ª–µ–º–∞–º–∏)...")
    asyncio.run(create_stable_with_minor_issues_scenario())
    print("‚úÖ –°—Ü–µ–Ω–∞—Ä—ñ–π 1 –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")