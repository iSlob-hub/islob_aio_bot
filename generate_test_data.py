"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó —Ç–µ—Å—Ç–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
"""

import asyncio
from datetime import datetime, timedelta
from app.db.database import init_db
from app.db.models import User, MorningQuiz, TrainingSession
import random


async def generate_test_data_for_user(user_id: str, days: int = 35):
    """–ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —Ç–µ—Å—Ç–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑–∞ –≤–∫–∞–∑–∞–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å –¥–Ω—ñ–≤"""
    
    print(f"–ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —Ç–µ—Å—Ç–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id} –∑–∞ {days} –¥–Ω—ñ–≤...")
    
    # –í–∏–¥–∞–ª—è—î–º–æ —Å—Ç–∞—Ä—ñ –¥–∞–Ω—ñ
    await MorningQuiz.find({"user_id": user_id}).delete()
    await TrainingSession.find({"user_id": user_id}).delete()
    print("–í–∏–¥–∞–ª–µ–Ω–æ —Å—Ç–∞—Ä—ñ –¥–∞–Ω—ñ")
    
    # –ë–∞–∑–æ–≤—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏
    base_weight = 72.5  # —Ä–µ–∞–ª—ñ—Å—Ç–∏—á–Ω–∞ –≤–∞–≥–∞
    base_wellbeing = 7
    quiz_count = 0
    training_count = 0
    
    # –ì–µ–Ω–µ—Ä—É—î–º–æ —Ä–∞–Ω–∫–æ–≤—ñ –∫–≤—ñ–∑–∏ (–º–∞–π–∂–µ –∫–æ–∂–µ–Ω –¥–µ–Ω—å)
    for i in range(days):
        date = datetime.now() - timedelta(days=i)
        
        # 90% –π–º–æ–≤—ñ—Ä–Ω—ñ—Å—Ç—å –∑–∞–ø–æ–≤–Ω–µ–Ω–Ω—è –∫–≤—ñ–∑—É
        if random.random() < 0.9:
            # –†–µ–∞–ª—ñ—Å—Ç–∏—á–Ω—ñ –∑–º—ñ–Ω–∏ –∑ —Ü—ñ–ª–∏–º–∏ –∞–±–æ –ø—Ä–æ—Å—Ç–∏–º–∏ —á–∏—Å–ª–∞–º–∏
            weight_change = round(random.uniform(-0.5, 0.5) + (i * 0.02), 1)  # –ø–æ—Å—Ç—É–ø–æ–≤–µ –∑–Ω–∏–∂–µ–Ω–Ω—è –≤–∞–≥–∏
            wellbeing = max(1, min(10, base_wellbeing + random.randint(-2, 3)))
            sleep_hours = round(random.uniform(6.0, 9.5), 1)  # –æ–∫—Ä—É–≥–ª—é—î–º–æ –¥–æ 1 –∑–Ω–∞–∫–∞
            
            # –í–∞—Ä—ñ–∞—Ü—ñ—ó –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ –¥–Ω—è —Ç–∏–∂–Ω—è
            day_of_week = date.weekday()
            if day_of_week in [5, 6]:  # –≤–∏—Ö—ñ–¥–Ω—ñ
                sleep_hours = round(sleep_hours + random.uniform(0.5, 1.5), 1)
                wellbeing += random.randint(0, 1)
            
            morning_quiz = MorningQuiz(
                user_id=user_id,
                how_do_you_feel_today=wellbeing,
                how_many_hours_of_sleep=max(4.0, min(12.0, sleep_hours)),
                weight=round(max(65.0, min(80.0, base_weight + weight_change)), 1),  # –æ–∫—Ä—É–≥–ª—é—î–º–æ –≤–∞–≥—É
                is_going_to_gym=random.choice([True, False]),
                completed=True,
                created_at=date
            )
            await morning_quiz.save()
            quiz_count += 1
    
    # –ì–µ–Ω–µ—Ä—É—î–º–æ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è (3-4 —Ä–∞–∑–∏ –Ω–∞ —Ç–∏–∂–¥–µ–Ω—å)
    for i in range(days):
        date = datetime.now() - timedelta(days=i)
        day_of_week = date.weekday()
        
        # –ë—ñ–ª—å—à–µ —Ç—Ä–µ–Ω—É–≤–∞–Ω—å —É –±—É–¥–Ω—ñ
        training_probability = 0.6 if day_of_week < 5 else 0.3
        
        if random.random() < training_probability:
            # –ü—Ä–æ–≥—Ä–µ—Å —É —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è—Ö
            progress = (days - i) / days
            
            difficulty = max(1, min(10, 5 + int(progress * 3) + random.randint(-2, 2)))
            stress = max(1, min(10, 6 - int(progress * 2) + random.randint(-2, 2)))
            feeling_before = random.randint(6, 10)
            
            # –ë—ñ–ª—å—à —Ä–µ–∞–ª—ñ—Å—Ç–∏—á–Ω—ñ —Ç—Ä–∏–≤–∞–ª–æ—Å—Ç—ñ —Ç—Ä–µ–Ω—É–≤–∞–Ω—å (–æ–∫—Ä—É–≥–ª–µ–Ω—ñ –¥–æ 5 —Ö–≤–∏–ª–∏–Ω)
            base_duration = random.choice([45, 50, 55, 60, 65, 70, 75, 80, 85, 90])
            duration = base_duration
            
            training_session = TrainingSession(
                user_id=user_id,
                how_do_you_feel_before=feeling_before,
                how_hard_was_training=difficulty,
                do_you_have_any_pain=random.choice([True, False, False, False]),
                training_started_at=date,
                training_ended_at=date + timedelta(minutes=duration),
                training_duration=duration,
                stress_level=stress,
                completed=True,
                created_at=date
            )
            await training_session.save()
            training_count += 1
    
    print(f"‚úÖ –ó–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ {quiz_count} —Ä–∞–Ω–∫–æ–≤–∏—Ö –∫–≤—ñ–∑—ñ–≤")
    print(f"‚úÖ –ó–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ {training_count} —Ç—Ä–µ–Ω—É–≤–∞–Ω—å")
    print(f"‚úÖ –î–∞–Ω—ñ —Å—Ç–≤–æ—Ä–µ–Ω–æ –∑–∞ –ø–µ—Ä—ñ–æ–¥: {(datetime.now() - timedelta(days=days-1)).strftime('%Y-%m-%d')} - {datetime.now().strftime('%Y-%m-%d')}")


async def create_test_user(telegram_id: str):
    """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    
    # –í–∏–¥–∞–ª—è—î–º–æ —ñ—Å–Ω—É—é—á–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    existing_user = await User.find_one({"telegram_id": telegram_id})
    if existing_user:
        await existing_user.delete()
        print(f"–í–∏–¥–∞–ª–µ–Ω–æ —ñ—Å–Ω—É—é—á–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {telegram_id}")
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–æ–≥–æ
    test_user = User(
        telegram_id=telegram_id,
        full_name="–¢–µ—Å—Ç–æ–≤–∏–π –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á",
        telegram_username="yuk0sm",
        is_active=True,
        is_verified=True
    )
    await test_user.save()
    print(f"‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {telegram_id}")


async def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó —Ç–µ—Å—Ç–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö...")
    
    # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
    await init_db()
    
    # ID —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    test_user_id = "591812219"
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    await create_test_user(test_user_id)
    
    # –ì–µ–Ω–µ—Ä—É—î–º–æ –¥–∞–Ω—ñ –∑–∞ 35 –¥–Ω—ñ–≤ (5 —Ç–∏–∂–Ω—ñ–≤)
    await generate_test_data_for_user(test_user_id, days=35)
    
    # –ì–µ–Ω–µ—Ä—É—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    print("\nüìä –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤—ñ —Å—Ç–≤–æ—Ä–µ–Ω–∏—Ö –¥–∞–Ω–∏—Ö...")
    from app.statistics import StatisticsGenerator
    from app.db.models import PeriodType
    
    stats_generator = StatisticsGenerator()
    
    # –ì–µ–Ω–µ—Ä—É—î–º–æ —Ç–∏–∂–Ω–µ–≤—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    weekly_stats = await stats_generator.generate_user_statistics(test_user_id, PeriodType.WEEKLY)
    print(f"‚úÖ –ó–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ —Ç–∏–∂–Ω–µ–≤—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {test_user_id}")
    print("   –î–∞–Ω—ñ —É —Ç–∏–∂–Ω–µ–≤—ñ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏—Ü—ñ:")
    print(f"   - –¢–æ—á–æ–∫ –¥–∞–Ω–∏—Ö —É stress_data: {len(weekly_stats.stress_data.get('data_points', [])) if weekly_stats.stress_data else 0}")
    print(f"   - –¢–æ—á–æ–∫ –¥–∞–Ω–∏—Ö —É warehouse_data: {len(weekly_stats.warehouse_data.get('data_points', [])) if weekly_stats.warehouse_data else 0}")
    print(f"   - –¢–æ—á–æ–∫ –¥–∞–Ω–∏—Ö —É sleep_data: {len(weekly_stats.sleep_data.get('data_points', [])) if weekly_stats.sleep_data else 0}")
    print(f"   - –¢–æ—á–æ–∫ –¥–∞–Ω–∏—Ö —É wellbeing_data: {len(weekly_stats.wellbeing_data.get('data_points', [])) if weekly_stats.wellbeing_data else 0}")
    print(f"   - –¢–æ—á–æ–∫ –¥–∞–Ω–∏—Ö —É weight_data: {len(weekly_stats.weight_data.get('data_points', [])) if weekly_stats.weight_data else 0}")
    
    # –ì–µ–Ω–µ—Ä—É—î–º–æ –º—ñ—Å—è—á–Ω—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    monthly_stats = await stats_generator.generate_user_statistics(test_user_id, PeriodType.MONTHLY)
    print(f"‚úÖ –ó–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ –º—ñ—Å—è—á–Ω—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {test_user_id}")
    print("   –î–∞–Ω—ñ —É –º—ñ—Å—è—á–Ω—ñ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏—Ü—ñ:")
    print(f"   - –¢–æ—á–æ–∫ –¥–∞–Ω–∏—Ö —É stress_data: {len(monthly_stats.stress_data.get('data_points', [])) if monthly_stats.stress_data else 0}")
    print(f"   - –¢–æ—á–æ–∫ –¥–∞–Ω–∏—Ö —É warehouse_data: {len(monthly_stats.warehouse_data.get('data_points', [])) if monthly_stats.warehouse_data else 0}")
    print(f"   - –¢–æ—á–æ–∫ –¥–∞–Ω–∏—Ö —É sleep_data: {len(monthly_stats.sleep_data.get('data_points', [])) if monthly_stats.sleep_data else 0}")
    print(f"   - –¢–æ—á–æ–∫ –¥–∞–Ω–∏—Ö —É wellbeing_data: {len(monthly_stats.wellbeing_data.get('data_points', [])) if monthly_stats.wellbeing_data else 0}")
    print(f"   - –¢–æ—á–æ–∫ –¥–∞–Ω–∏—Ö —É weight_data: {len(monthly_stats.weight_data.get('data_points', [])) if monthly_stats.weight_data else 0}")
    
    print("\nüéâ –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —Ç–µ—Å—Ç–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö —Ç–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    print(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: {test_user_id}")
    print("–¢–µ–ø–µ—Ä –º–æ–∂–Ω–∞ —Ç–µ—Å—Ç—É–≤–∞—Ç–∏ —Å–∏—Å—Ç–µ–º—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —ñ –≤—ñ–∑—É–∞–ª—ñ–∑–∞—Ü—ñ—é")


if __name__ == "__main__":
    asyncio.run(main())
