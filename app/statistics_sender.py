"""
–ú–æ–¥—É–ª—å –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º —á–µ—Ä–µ–∑ Telegram
"""
import logging
import asyncio
import os
from datetime import datetime, timedelta
from pathlib import Path
from typing import List, Optional

from aiogram import Bot
from aiogram.types import InputFile, FSInputFile

from app.db.models import User, UserStatistics, PeriodType
from app.statistics_web_generator import WebStatisticsGenerator

logger = logging.getLogger(__name__)

# –Ü–º–ø–æ—Ä—Ç—É—î–º–æ AI –∞–Ω–∞–ª—ñ–∑–∞—Ç–æ—Ä (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ)
try:
    from app.ai_analyzer import StatisticsAnalyzer
    AI_ANALYZER_AVAILABLE = True
except ImportError:
    AI_ANALYZER_AVAILABLE = False
    logger.warning("AI –∞–Ω–∞–ª—ñ–∑–∞—Ç–æ—Ä –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∏–π")


class StatisticsSender:
    """–ö–ª–∞—Å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó —Ç–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º"""
    
    def __init__(self, bot: Bot):
        self.bot = bot
        self.web_generator = WebStatisticsGenerator()
        
        # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ AI –∞–Ω–∞–ª—ñ–∑–∞—Ç–æ—Ä, —è–∫—â–æ –¥–æ—Å—Ç—É–ø–Ω–∏–π
        self.ai_analyzer = None
        if AI_ANALYZER_AVAILABLE:
            try:
                self.ai_analyzer = StatisticsAnalyzer()
                logger.info("AI –∞–Ω–∞–ª—ñ–∑–∞—Ç–æ—Ä —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ")
            except Exception as e:
                logger.error(f"–ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó AI –∞–Ω–∞–ª—ñ–∑–∞—Ç–æ—Ä–∞: {e}")
        
    async def send_weekly_statistics_to_user(self, user_id: str, 
                                             stats: Optional[UserStatistics] = None) -> bool:
        """
        –í—ñ–¥–ø—Ä–∞–≤–ª—è—î —Ç–∏–∂–Ω–µ–≤—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
        
        Args:
            user_id: ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            stats: –æ–±'—î–∫—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ)
            
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—è (True/False)
        """
        try:
            # –Ø–∫—â–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω–∞, —à—É–∫–∞—î–º–æ —ó—ó –≤ –±–∞–∑—ñ
            if not stats:
                from app.statistics_scheduler import get_user_statistics
                result = await get_user_statistics(
                    user_id=user_id,
                    period_type="weekly",
                    generate_if_missing=True,
                    generate_image=False,
                    use_previous_period=True
                )
                stats = result.get("statistics")
                
            if not stats:
                logger.warning(f"–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id}")
                return False
                
            # –ó–∞–ø—É—Å–∫–∞—î–º–æ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—é AI-–∞–Ω–∞–ª—ñ–∑—É, —è–∫—â–æ –¥–æ—Å—Ç—É–ø–Ω–æ
            if self.ai_analyzer and not stats.ai_analysis:
                try:
                    logger.info(f"–ì–µ–Ω–µ—Ä—É—î–º–æ AI-–∞–Ω–∞–ª—ñ–∑ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id}")
                    await self.ai_analyzer.analyze_statistics(stats)
                except Exception as ai_err:
                    logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó AI-–∞–Ω–∞–ª—ñ–∑—É: {ai_err}")
            
            # –ì–µ–Ω–µ—Ä—É—î–º–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –≤–µ–±-–≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞
            image_path = await self.web_generator.generate_image(stats)
            
            if not image_path or not os.path.exists(image_path):
                logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id}")
                return False
                
            # –§–æ—Ä–º—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
            caption = f"üìä <b>–í–∞—à–∞ —Ç–∏–∂–Ω–µ–≤–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π —Ç–∏–∂–¥–µ–Ω—å</b>\n\n" \
                      f"–ü–µ—Ä—ñ–æ–¥: {stats.period_start.strftime('%d.%m.%Y')} - {stats.period_end.strftime('%d.%m.%Y')}"
            
                
            # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
            await self.bot.send_photo(
                chat_id=user_id,
                photo=FSInputFile(image_path),
                caption=caption,
                parse_mode="HTML"
            )
            
            # –Ø–∫—â–æ —î AI-–∞–Ω–∞–ª—ñ–∑, –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –π–æ–≥–æ –æ–∫—Ä–µ–º–∏–º –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º
            if stats.ai_analysis:
                analysis_message = f"{stats.ai_analysis}"
                
                # –†–æ–∑–±–∏–≤–∞—î–º–æ –Ω–∞ —á–∞—Å—Ç–∏–Ω–∏, —è–∫—â–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑–∞–Ω–∞–¥—Ç–æ –¥–æ–≤–≥–µ
                if len(analysis_message) > 4000:
                    parts = [analysis_message[i:i+4000] for i in range(0, len(analysis_message), 4000)]
                    for i, part in enumerate(parts):
                        if i == 0:
                            await self.bot.send_message(
                                chat_id=user_id,
                                text=part,
                                parse_mode="HTML"
                            )
                        else:
                            await self.bot.send_message(
                                chat_id=user_id,
                                text=part,
                                parse_mode="HTML"
                            )
                        await asyncio.sleep(0.5)  # –ù–µ–≤–µ–ª–∏–∫–∞ –∑–∞—Ç—Ä–∏–º–∫–∞ –º—ñ–∂ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º–∏
                else:
                    await self.bot.send_message(
                        chat_id=user_id,
                        text=analysis_message,
                        parse_mode="HTML"
                    )
                logger.info(f"–í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ AI-–∞–Ω–∞–ª—ñ–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {user_id}")
            
            logger.info(f"–í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ —Ç–∏–∂–Ω–µ–≤—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {user_id}")
            return True
            
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {user_id}: {e}")
            return False
            
    async def send_monthly_statistics_to_user(self, user_id: str,
                                              stats: Optional[UserStatistics] = None) -> bool:
        """
        –í—ñ–¥–ø—Ä–∞–≤–ª—è—î –º—ñ—Å—è—á–Ω—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
        
        Args:
            user_id: ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            stats: –æ–±'—î–∫—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ)
            
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—è (True/False)
        """
        try:
            # –Ø–∫—â–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω–∞, —à—É–∫–∞—î–º–æ —ó—ó –≤ –±–∞–∑—ñ
            if not stats:
                from app.statistics_scheduler import get_user_statistics
                result = await get_user_statistics(
                    user_id=user_id,
                    period_type="monthly",
                    generate_if_missing=True,
                    generate_image=False,
                    use_previous_period=True
                )
                stats = result.get("statistics")
                
            if not stats:
                logger.warning(f"–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –º—ñ—Å—è—á–Ω—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id}")
                return False
                
            # –ó–∞–ø—É—Å–∫–∞—î–º–æ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—é AI-–∞–Ω–∞–ª—ñ–∑—É, —è–∫—â–æ –¥–æ—Å—Ç—É–ø–Ω–æ
            if self.ai_analyzer and not stats.ai_analysis:
                try:
                    logger.info(f"–ì–µ–Ω–µ—Ä—É—î–º–æ AI-–∞–Ω–∞–ª—ñ–∑ –¥–ª—è –º—ñ—Å—è—á–Ω–æ—ó —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id}")
                    await self.ai_analyzer.analyze_statistics(stats)
                except Exception as ai_err:
                    logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó AI-–∞–Ω–∞–ª—ñ–∑—É: {ai_err}")
            
            # –ì–µ–Ω–µ—Ä—É—î–º–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –≤–µ–±-–≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞
            image_path = await self.web_generator.generate_image(stats)
            
            if not image_path or not os.path.exists(image_path):
                logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –º—ñ—Å—è—á–Ω–æ—ó —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id}")
                return False
                
            # –§–æ—Ä–º—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
            caption = f"üìà <b>–í–∞—à–∞ –º—ñ—Å—è—á–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –º—ñ—Å—è—Ü—å</b>\n\n" \
                      f"–ü–µ—Ä—ñ–æ–¥: {stats.period_start.strftime('%d.%m.%Y')} - {stats.period_end.strftime('%d.%m.%Y')}"
        
                
            # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
            await self.bot.send_photo(
                chat_id=user_id,
                photo=FSInputFile(image_path),
                caption=caption,
                parse_mode="HTML"
            )
            
            # –Ø–∫—â–æ —î AI-–∞–Ω–∞–ª—ñ–∑, –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –π–æ–≥–æ –æ–∫—Ä–µ–º–∏–º –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º
            if stats.ai_analysis:
                analysis_message = f"{stats.ai_analysis}"
                
                # –†–æ–∑–±–∏–≤–∞—î–º–æ –Ω–∞ —á–∞—Å—Ç–∏–Ω–∏, —è–∫—â–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑–∞–Ω–∞–¥—Ç–æ –¥–æ–≤–≥–µ
                if len(analysis_message) > 4000:
                    parts = [analysis_message[i:i+4000] for i in range(0, len(analysis_message), 4000)]
                    for i, part in enumerate(parts):
                        if i == 0:
                            await self.bot.send_message(
                                chat_id=user_id,
                                text=part,
                                parse_mode="HTML"
                            )
                        else:
                            await self.bot.send_message(
                                chat_id=user_id,
                                text=part,
                                parse_mode="HTML"
                            )
                        await asyncio.sleep(0.5)  # –ù–µ–≤–µ–ª–∏–∫–∞ –∑–∞—Ç—Ä–∏–º–∫–∞ –º—ñ–∂ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º–∏
                else:
                    await self.bot.send_message(
                        chat_id=user_id,
                        text=analysis_message,
                        parse_mode="HTML"
                    )
                logger.info(f"–í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ AI-–∞–Ω–∞–ª—ñ–∑ –º—ñ—Å—è—á–Ω–æ—ó —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {user_id}")
            
            logger.info(f"–í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –º—ñ—Å—è—á–Ω—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {user_id}")
            return True
            
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –º—ñ—Å—è—á–Ω–æ—ó —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {user_id}: {e}")
            return False
    
    async def send_statistics_to_all_users(self, period_type: PeriodType) -> dict:
        """
        –í—ñ–¥–ø—Ä–∞–≤–ª—è—î —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤—Å—ñ–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º
        
        Args:
            period_type: —Ç–∏–ø –ø–µ—Ä—ñ–æ–¥—É (—Ç–∏–∂–Ω–µ–≤–∏–π/–º—ñ—Å—è—á–Ω–∏–π)
            
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—è
        """
        from app.statistics_scheduler import generate_statistics_manually
        
        results = {
            "success": 0,
            "failed": 0,
            "total": 0,
            "errors": []
        }
        
        try:
            # –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
            users = await User.find().to_list()
            results["total"] = len(users)
            
            # –ì–µ–Ω–µ—Ä—É—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –≤—Å—ñ—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
            period_str = "weekly" if period_type == PeriodType.WEEKLY else "monthly"
            stats_result = await generate_statistics_manually(
                period_type=period_str,
                generate_image=False
            )
            
            all_stats = stats_result.get("statistics", [])
            stats_by_user = {stat.user_id: stat for stat in all_stats}
            
            # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–æ–∂–Ω–æ–º—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
            for user in users:
                try:
                    user_id = user.telegram_id
                    user_stats = stats_by_user.get(user_id)
                    
                    if period_type == PeriodType.WEEKLY:
                        success = await self.send_weekly_statistics_to_user(user_id, user_stats)
                    else:
                        success = await self.send_monthly_statistics_to_user(user_id, user_stats)
                        
                    if success:
                        results["success"] += 1
                    else:
                        results["failed"] += 1
                        results["errors"].append(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {user_id}")
                        
                except Exception as e:
                    results["failed"] += 1
                    results["errors"].append(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {user.telegram_id}: {str(e)}")
                    logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {user.telegram_id}: {e}")
                    
                # –ó–∞—Ç—Ä–∏–º–∫–∞ –º—ñ–∂ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º–∏ –¥–ª—è —É–Ω–∏–∫–Ω–µ–Ω–Ω—è –æ–±–º–µ–∂–µ–Ω—å Telegram
                await asyncio.sleep(0.5)
                
            return results
            
        except Exception as e:
            results["errors"].append(f"–ó–∞–≥–∞–ª—å–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {str(e)}")
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º: {e}")
            return results

    def _clean_html_for_telegram(self, html_text: str) -> str:
        """
        –û—á–∏—â–∞—î HTML —Ç–µ–∫—Å—Ç –¥–ª—è —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ –∑ Telegram HTML –ø–∞—Ä—Å–µ—Ä–æ–º.
        –í–∏–¥–∞–ª—è—î –∞–±–æ –≤–∏–ø—Ä–∞–≤–ª—è—î –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω—ñ HTML —Ç–µ–≥–∏, —è–∫—ñ –º–æ–∂—É—Ç—å —Å–ø—Ä–∏—á–∏–Ω–∏—Ç–∏ –ø–æ–º–∏–ª–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥—É.
        """
        import re
        from html.parser import HTMLParser

        if not html_text:
            return html_text

        # –ó–∞–ª–∏—à–∞—î–º–æ —Ç—ñ–ª—å–∫–∏ –ø—ñ–¥—Ç—Ä–∏–º—É–≤–∞–Ω—ñ Telegram —Ç–µ–≥–∏ —ñ –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —ó—Ö –∫–æ—Ä–µ–∫—Ç–Ω—ñ—Å—Ç—å
        supported_tags = ['b', 'i', 'u', 's', 'code', 'pre', 'a']

        # –°–ø–æ—á–∞—Ç–∫—É –ø–µ—Ä–µ–≤—ñ—Ä–∏–º–æ –Ω–∞ –Ω–µ–∑–∞–∫—Ä–∏—Ç—ñ —Ç–µ–≥–∏
        class TagChecker(HTMLParser):
            def __init__(self):
                super().__init__()
                self.stack = []
                self.unclosed_tags = []

            def handle_starttag(self, tag, attrs):
                if tag in supported_tags:
                    self.stack.append(tag)

            def handle_endtag(self, tag):
                if tag in supported_tags:
                    if self.stack and self.stack[-1] == tag:
                        self.stack.pop()
                    else:
                        # –ù–µ–∑–∞–∫—Ä–∏—Ç–∏–π —Ç–µ–≥ - –∑–∞–ø–∞–º'—è—Ç–æ–≤—É—î–º–æ –¥–ª—è –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è
                        self.unclosed_tags.append(tag)

            def get_unclosed_tags(self):
                return self.stack

        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–µ–≥—ñ–≤
        checker = TagChecker()
        checker.feed(html_text)

        # –í–∏–ø—Ä–∞–≤–ª—è—î–º–æ –Ω–µ–∑–∞–∫—Ä–∏—Ç—ñ —Ç–µ–≥–∏, –¥–æ–¥–∞—é—á–∏ –∑–∞–∫—Ä–∏–≤–∞—é—á—ñ –≤ –∫—ñ–Ω—Ü—ñ
        for tag in reversed(checker.get_unclosed_tags()):
            html_text += f'</{tag}>'

        # –û—á–∏—â–∞—î–º–æ –∑–∞–π–≤—ñ –ø—Ä–æ–±—ñ–ª–∏ —Ç–∞ –Ω–æ–≤—ñ —Ä—è–¥–∫–∏
        html_text = re.sub(r'\s+', ' ', html_text).strip()

        # –û–±–º–µ–∂—É—î–º–æ –¥–æ–≤–∂–∏–Ω—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è (Telegram –º–∞—î –ª—ñ–º—ñ—Ç 4096 —Å–∏–º–≤–æ–ª—ñ–≤)
        if len(html_text) > 4000:
            html_text = html_text[:4000] + "..."

        return html_text


# –§—É–Ω–∫—Ü—ñ—ó –¥–ª—è —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—ó –∑ –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫–æ–º

async def send_weekly_statistics_to_all_users(bot):
    """–í—ñ–¥–ø—Ä–∞–≤–ª—è—î —Ç–∏–∂–Ω–µ–≤—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤—Å—ñ–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º"""
    sender = StatisticsSender(bot)
    return await sender.send_statistics_to_all_users(PeriodType.WEEKLY)


async def send_monthly_statistics_to_all_users(bot):
    """–í—ñ–¥–ø—Ä–∞–≤–ª—è—î –º—ñ—Å—è—á–Ω—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤—Å—ñ–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º"""
    sender = StatisticsSender(bot)
    return await sender.send_statistics_to_all_users(PeriodType.MONTHLY)
