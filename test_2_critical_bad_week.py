#!/usr/bin/env python3
"""
–ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —Ç–µ—Å—Ç–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö –¥–ª—è —Å—Ü–µ–Ω–∞—Ä—ñ—é 2:
–î—É–∂–µ –ø–æ–≥–∞–Ω–∏–π —Ç–∏–∂–¥–µ–Ω—å: –≤–∏—Å–æ–∫–∏–π —Å—Ç—Ä–µ—Å, –Ω–µ—Å—Ç–∞–±—ñ–ª—å–Ω–∏–π —Å–æ–Ω (–Ω–∞–≤—ñ—Ç—å –¥–Ω—ñ –±–µ–∑ —Å–Ω—É), 
–Ω–∏–∑—å–∫–µ —Å–∞–º–æ–ø–æ—á—É—Ç—Ç—è, —Ä—ñ–∑–∫–∞ –≤—Ç—Ä–∞—Ç–∞ –≤–∞–≥–∏.
–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –¥–ª—è –∂–æ—Ä—Å—Ç–∫–æ–≥–æ –∫—Ä–∏—Ç–∏—á–Ω–æ–≥–æ —Ä–æ–∑–±–æ—Ä—É —ñ —Å–µ—Ä–π–æ–∑–Ω–æ–≥–æ –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è.
"""

import asyncio
from datetime import datetime, timedelta
from app.db.database import init_db
from app.db.models import (
    User, MorningQuiz, TrainingSession, UserStatistics, 
    PeriodType, TrainingGoal
)
from zoneinfo import ZoneInfo

async def create_critical_bad_week_scenario():
    """
    –°—Ü–µ–Ω–∞—Ä—ñ–π 2: –ö—Ä–∏—Ç–∏—á–Ω–æ –ø–æ–≥–∞–Ω–∏–π —Ç–∏–∂–¥–µ–Ω—å
    –í–∏—Å–æ–∫–∏–π —Å—Ç—Ä–µ—Å (7.5), –Ω–µ—Å—Ç–∞–±—ñ–ª—å–Ω–∏–π —Å–æ–Ω –∑ –¥–Ω—è–º–∏ –±–µ–∑ —Å–Ω—É, –Ω–∏–∑—å–∫–µ —Å–∞–º–æ–ø–æ—á—É—Ç—Ç—è (2.8), —Ä—ñ–∑–∫–∞ –≤—Ç—Ä–∞—Ç–∞ –≤–∞–≥–∏ (-3.2–∫–≥)
    """
    await init_db()
    
    test_user_id = "critical_bad_week_user"
    
    # –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑ —Ü—ñ–ª–ª—é —Å—Ö—É–¥–Ω–µ–Ω–Ω—è
    test_user = User(
        telegram_id=test_user_id,
        full_name="–ö—Ä–∏—Ç–∏—á–Ω–æ –ü–æ–≥–∞–Ω–∏–π –¢–∏–∂–¥–µ–Ω—å",
        telegram_username="critical_bad_week",
        is_active=True,
        is_verified=True,
        training_goal=TrainingGoal.LOSE_WEIGHT
    )
    await test_user.save()
    print(f"‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: {test_user.full_name}")
    
    # –ü–µ—Ä—ñ–æ–¥ (22 –≤–µ—Ä–µ—Å–Ω—è 2025, 21:16)
    start_date = datetime(2025, 9, 22, 21, 16, tzinfo=ZoneInfo("Europe/Kyiv"))
    
    # –î–∞–Ω—ñ –¥–ª—è –∫—Ä–∏—Ç–∏—á–Ω–æ –ø–æ–≥–∞–Ω–æ–≥–æ —Ç–∏–∂–Ω—è (7 –¥–Ω—ñ–≤)
    daily_data = [
        # –î–µ–Ω—å 1 - –ø–æ—á–∞—Ç–æ–∫ –ø—Ä–æ–±–ª–µ–º
        {"stress": 6, "sleep": 4.0, "wellbeing": 4, "training": 5, "weight": 76.0},
        # –î–µ–Ω—å 2 - –ø–æ–≥—ñ—Ä—à–µ–Ω–Ω—è
        {"stress": 8, "sleep": 2.0, "wellbeing": 3, "training": 3, "weight": 75.2},
        # –î–µ–Ω—å 3 - –∫—Ä–∏—Ç–∏—á–Ω–∏–π –¥–µ–Ω—å, –ë–ï–ó –°–ù–£
        {"stress": 9, "sleep": 0.0, "wellbeing": 2, "training": 2, "weight": 74.5},
        # –î–µ–Ω—å 4 - –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è –∫—Ä–∏–∑–∏
        {"stress": 8, "sleep": 1.0, "wellbeing": 2, "training": 4, "weight": 73.8},
        # –î–µ–Ω—å 5 - —Å–ø—Ä–æ–±–∞ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è –Ω–µ –≤–¥–∞—î—Ç—å—Å—è
        {"stress": 7, "sleep": 3.0, "wellbeing": 3, "training": 3, "weight": 73.2},
        # –î–µ–Ω—å 6 - –∑–Ω–æ–≤—É –ø–æ–≥–∞–Ω–æ
        {"stress": 8, "sleep": 2.0, "wellbeing": 2, "training": 2, "weight": 73.0},
        # –î–µ–Ω—å 7 - –º—ñ–Ω—ñ–º–∞–ª—å–Ω–µ –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è
        {"stress": 6, "sleep": 4.0, "wellbeing": 4, "training": 4, "weight": 72.8}
    ]
    
    training_sessions_count = 0
    morning_quizzes_count = 0
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ –¥–∞–Ω—ñ –ø–æ –¥–Ω—è—Ö
    for day, data in enumerate(daily_data):
        current_date = start_date + timedelta(days=day)
        
        # –†–∞–Ω–∫–æ–≤—ñ –∫–≤—ñ–∑–∏ –∑ —Ä—ñ–∑–∫–æ—é –≤—Ç—Ä–∞—Ç–æ—é –≤–∞–≥–∏
        morning_quiz = MorningQuiz(
            user_id=test_user_id,
            how_do_you_feel_today=data["wellbeing"],
            how_many_hours_of_sleep=data["sleep"],
            weight=data["weight"],
            is_going_to_gym=data["training"] > 2,  # –ù–µ –π–¥–µ –≤ –∑–∞–ª –ø—Ä–∏ –¥—É–∂–µ —Å–ª–∞–±–∫–∏—Ö —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è—Ö
            gym_attendance_time=current_date.replace(hour=18, minute=0) if data["training"] > 2 else None,
            completed=True,
            created_at=current_date.replace(hour=8, minute=0)
        )
        await morning_quiz.save()
        morning_quizzes_count += 1
        
        # –°–ª–∞–±–∫—ñ —Ç—Ä–µ–Ω—É–≤–∞–ª—å–Ω—ñ —Å–µ—Å—ñ—ó (—ñ–Ω–æ–¥—ñ –ø—Ä–æ–ø—É—Å–∫–∞—î)
        if data["training"] > 2:  # –¢—Ä–µ–Ω—É—î—Ç—å—Å—è —Ç—ñ–ª—å–∫–∏ –∫–æ–ª–∏ —Å–∏–ª–∏ —î
            training_session = TrainingSession(
                user_id=test_user_id,
                how_do_you_feel_before=data["wellbeing"],
                how_hard_was_training=data["training"],
                do_you_have_any_pain=True if data["stress"] > 7 else False,
                training_started_at=current_date.replace(hour=18, minute=0),
                training_ended_at=current_date.replace(hour=18, minute=30),  # –ö–æ—Ä–æ—Ç–∫—ñ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è
                training_duration=30,  # –¢—ñ–ª—å–∫–∏ 30 —Ö–≤–∏–ª–∏–Ω
                stress_level=data["stress"],
                do_you_have_soreness=True,
                completed=True,
                created_at=current_date.replace(hour=18, minute=0)
            )
            await training_session.save()
            training_sessions_count += 1
    
    print(f"‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ {morning_quizzes_count} —Ä–∞–Ω–∫–æ–≤–∏—Ö –∫–≤—ñ–∑—ñ–≤")
    print(f"‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ {training_sessions_count} —Ç—Ä–µ–Ω—É–≤–∞–ª—å–Ω–∏—Ö —Å–µ—Å—ñ–π (–ø—Ä–æ–ø—É—â–µ–Ω–æ {7-training_sessions_count})")
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    end_date = start_date + timedelta(days=6, hours=23, minutes=59, seconds=59)
    
    # –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ –º–µ—Ç—Ä–∏–∫–∏
    stress_avg = sum(d["stress"] for d in daily_data) / len(daily_data)  # 7.4
    sleep_avg = sum(d["sleep"] for d in daily_data) / len(daily_data)    # 2.3
    wellbeing_avg = sum(d["wellbeing"] for d in daily_data) / len(daily_data)  # 2.9
    training_avg = sum(d["training"] for d in daily_data) / len(daily_data)    # 3.3
    
    start_weight = daily_data[0]["weight"]
    end_weight = daily_data[-1]["weight"]
    weight_change = end_weight - start_weight  # -3.2
    
    user_statistics = UserStatistics(
        user_id=test_user_id,
        period_type=PeriodType.WEEKLY,
        period_start=start_date,
        period_end=end_date,
        total_training_sessions=training_sessions_count,
        total_morning_quizzes=morning_quizzes_count,
        
        # –°—Ç—Ä–µ—Å: –∫—Ä–∏—Ç–∏—á–Ω–æ –≤–∏—Å–æ–∫–∏–π 7.4, –ø—ñ–∫ –¥–æ 9
        stress_data={
            "chart_type": "line",
            "average": 7.4,
            "trend": "critical",
            "data_points": [
                {"date": (start_date + timedelta(days=i)).strftime("%Y-%m-%d"), "value": daily_data[i]["stress"]}
                for i in range(len(daily_data))
            ]
        },
        
        # –¢—Ä–µ–Ω—É–≤–∞–Ω–Ω—è: —Å–ª–∞–±–∫—ñ 3.3, –±–∞–≥–∞—Ç–æ –ø—Ä–æ–ø—É—Å–∫—ñ–≤
        warehouse_data={
            "chart_type": "bar",
            "average": 3.3,
            "trend": "decreasing",
            "data_points": [
                {"date": (start_date + timedelta(days=i)).strftime("%Y-%m-%d"), "value": daily_data[i]["training"]}
                for i in range(len(daily_data))
            ]
        },
        
        # –°–æ–Ω: –∫–∞—Ç–∞—Å—Ç—Ä–æ—Ñ—ñ—á–Ω–æ –ø–æ–≥–∞–Ω–∏–π 2.3 –≥–æ–¥–∏–Ω–∏, —î –¥–µ–Ω—å –ë–ï–ó –°–ù–£
        sleep_data={
            "chart_type": "line",
            "average": 2.3,
            "trend": "critical",
            "total_sleep_hours": sum(d["sleep"] for d in daily_data),
            "data_points": [
                {"date": (start_date + timedelta(days=i)).strftime("%Y-%m-%d"), "value": daily_data[i]["sleep"]}
                for i in range(len(daily_data))
            ]
        },
        
        # –°–∞–º–æ–ø–æ—á—É—Ç—Ç—è: –∫—Ä–∏—Ç–∏—á–Ω–æ –Ω–∏–∑—å–∫–µ 2.9
        wellbeing_data={
            "chart_type": "line",
            "average": 2.9,
            "trend": "critical",
            "data_points": [
                {"date": (start_date + timedelta(days=i)).strftime("%Y-%m-%d"), "value": daily_data[i]["wellbeing"]}
                for i in range(len(daily_data))
            ]
        },
        
        # –í–∞–≥–∞: —Ä—ñ–∑–∫–∞ –≤—Ç—Ä–∞—Ç–∞ -3.2 –∫–≥ (–Ω–µ–±–µ–∑–ø–µ—á–Ω–æ)
        weight_data={
            "chart_type": "line",
            "average": round((start_weight + end_weight) / 2, 1),
            "trend": "critical_decrease",
            "start_weight": start_weight,
            "end_weight": end_weight,
            "weight_change": round(weight_change, 1),
            "data_points": [
                {"date": (start_date + timedelta(days=i)).strftime("%Y-%m-%d"), "value": daily_data[i]["weight"]}
                for i in range(len(daily_data))
            ]
        },
        
        is_complete=True,
        generated_at=datetime.now(ZoneInfo("Europe/Kyiv"))
    )
    
    await user_statistics.save()
    print(f"‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –ø–µ—Ä—ñ–æ–¥—É {start_date.date()} - {end_date.date()}")
    
    # –í–∏–≤–æ–¥–∏–º–æ –ø—ñ–¥—Å—É–º–æ–∫
    print(f"""
üìä –°—Ü–µ–Ω–∞—Ä—ñ–π 2 - –ö—Ä–∏—Ç–∏—á–Ω–æ –ø–æ–≥–∞–Ω–∏–π —Ç–∏–∂–¥–µ–Ω—å:
üßò‚Äç‚ôÇÔ∏è –°–µ—Ä–µ–¥–Ω—ñ–π —Å—Ç—Ä–µ—Å: {stress_avg:.1f} (–ö–†–ò–¢–ò–ß–ù–û –í–ò–°–û–ö–ò–ô, –ø—ñ–∫ 9)
üí™ –°–∫–ª–∞–¥–Ω—ñ—Å—Ç—å —Ç—Ä–µ–Ω—É–≤–∞–Ω—å: {training_avg:.1f} (—Å–ª–∞–±–∫—ñ, –±–∞–≥–∞—Ç–æ –ø—Ä–æ–ø—É—Å–∫—ñ–≤)
üò¥ –°–µ—Ä–µ–¥–Ω—ñ–π —Å–æ–Ω: {sleep_avg:.1f} –≥–æ–¥–∏–Ω (–ö–ê–¢–ê–°–¢–†–û–§–ê, —î –¥–µ–Ω—å –ë–ï–ó –°–ù–£)
üòÑ –ó–∞–≥–∞–ª—å–Ω–µ —Å–∞–º–æ–ø–æ—á—É—Ç—Ç—è: {wellbeing_avg:.1f} (–∫—Ä–∏—Ç–∏—á–Ω–æ –Ω–∏–∑—å–∫–µ)
üî• –ó–º—ñ–Ω–∞ –≤–∞–≥–∏: {weight_change:.1f} –∫–≥ (–ù–ï–ë–ï–ó–ü–ï–ß–ù–ê –≤—Ç—Ä–∞—Ç–∞)
üéØ –¶—ñ–ª—å: {test_user.training_goal.value}

–û—á—ñ–∫—É–≤–∞–Ω–∏–π –∞–Ω–∞–ª—ñ–∑: –∂–æ—Ä—Å—Ç–∫–∏–π –∫—Ä–∏—Ç–∏—á–Ω–∏–π —Ä–æ–∑–±—ñ—Ä –∑ —Å–µ—Ä–π–æ–∑–Ω–∏–º –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è–º
–ø—Ä–æ –∑–¥–æ—Ä–æ–≤'—è, —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó –Ω–µ–≥–∞–π–Ω–æ –∑–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –ª—ñ–∫–∞—Ä—è
""")

if __name__ == "__main__":
    print("–ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —Ç–µ—Å—Ç–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö –¥–ª—è –°—Ü–µ–Ω–∞—Ä—ñ—é 2 (–ö—Ä–∏—Ç–∏—á–Ω–æ –ø–æ–≥–∞–Ω–∏–π —Ç–∏–∂–¥–µ–Ω—å)...")
    asyncio.run(create_critical_bad_week_scenario())
    print("‚úÖ –°—Ü–µ–Ω–∞—Ä—ñ–π 2 –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")