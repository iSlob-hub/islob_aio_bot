#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –≤–∏—Ç—è–≥–∞–Ω–Ω—è AI –∞–Ω–∞–ª—ñ–∑—ñ–≤ —ñ–∑ —Ç–µ—Å—Ç–æ–≤–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ —Ç–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —ó—Ö —É —Ç–µ–∫—Å—Ç–æ–≤—ñ —Ñ–∞–π–ª–∏.
–î–ª—è –∫–æ–∂–Ω–æ–≥–æ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —Å—Ç–≤–æ—Ä—é—î –æ–∫—Ä–µ–º–∏–π —Ñ–∞–π–ª –∑ –π–æ–≥–æ AI –∞–Ω–∞–ª—ñ–∑–æ–º.
"""

import asyncio
import os
from datetime import datetime
from app.db.database import init_db
from app.db.models import User, UserStatistics
from zoneinfo import ZoneInfo

async def extract_ai_analyses():
    """
    –í–∏—Ç—è–≥—É—î AI –∞–Ω–∞–ª—ñ–∑–∏ –∑ —É—Å—ñ—Ö —Ç–µ—Å—Ç–æ–≤–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ —ñ –∑–±–µ—Ä—ñ–≥–∞—î —É —Ç–µ–∫—Å—Ç–æ–≤—ñ —Ñ–∞–π–ª–∏
    """
    await init_db()
    
    # –°–ø–∏—Å–æ–∫ —Ç–µ—Å—Ç–æ–≤–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
    test_user_ids = [
        "stable_minor_issues_user",
        "critical_bad_week_user", 
        "unstable_medium_user",
        "high_stress_strong_training_user",
        "good_recovery_weak_training_user",
        "missing_data_super_intensive_user",
        "real_missing_data_user",
        # –°—Ç–∞—Ä—ñ —Ç–µ—Å—Ç–æ–≤—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ –∑ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ—Ö —Å—Ü–µ–Ω–∞—Ä—ñ—ó–≤
        "scenario_1_user",
        "scenario_2_user",
        "scenario_3_user",
        "scenario_4_user",
        "scenario_5_user",
        "test_user_123"
    ]
    
    print("üîç –ü–æ—á–∞—Ç–æ–∫ –≤–∏—Ç—è–≥–∞–Ω–Ω—è AI –∞–Ω–∞–ª—ñ–∑—ñ–≤...")
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ –ø–∞–ø–∫—É –¥–ª—è –∞–Ω–∞–ª—ñ–∑—ñ–≤ —è–∫—â–æ —ó—ó –Ω–µ–º–∞—î
    analyses_dir = "extracted_ai_analyses"
    if not os.path.exists(analyses_dir):
        os.makedirs(analyses_dir)
        print(f"üìÅ –°—Ç–≤–æ—Ä–µ–Ω–æ –ø–∞–ø–∫—É {analyses_dir}")
    
    extracted_count = 0
    empty_count = 0
    
    # –ü—Ä–æ—Ö–æ–¥–∏–º–æ –ø–æ –≤—Å—ñ—Ö —Ç–µ—Å—Ç–æ–≤–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞—Ö
    for user_id in test_user_ids:
        try:
            # –®—É–∫–∞—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            user = await User.find_one(User.telegram_id == user_id)
            if not user:
                print(f"‚è≠Ô∏è  –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
                continue
            
            # –®—É–∫–∞—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è —Ü—å–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            statistics = await UserStatistics.find(UserStatistics.user_id == user_id).to_list()
            
            if not statistics:
                print(f"‚è≠Ô∏è  –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è {user_id} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
                empty_count += 1
                continue
            
            # –ë–µ—Ä–µ–º–æ –æ—Å—Ç–∞–Ω–Ω—é (–Ω–∞–π–Ω–æ–≤—ñ—à—É) —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            latest_stat = max(statistics, key=lambda s: s.generated_at)
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —î AI –∞–Ω–∞–ª—ñ–∑
            if not latest_stat.ai_analysis:
                print(f"‚ùå AI –∞–Ω–∞–ª—ñ–∑ –¥–ª—è {user_id} –≤—ñ–¥—Å—É—Ç–Ω—ñ–π")
                empty_count += 1
                continue
            
            # –§–æ—Ä–º—É—î–º–æ –Ω–∞–∑–≤—É —Ñ–∞–π–ª—É
            filename = f"{user_id}_analysis.txt"
            filepath = os.path.join(analyses_dir, filename)
            
            # –§–æ—Ä–º—É—î–º–æ –∑–º—ñ—Å—Ç —Ñ–∞–π–ª—É
            file_content = f"""AI –ê–Ω–∞–ª—ñ–∑ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: {user.full_name}
–¶—ñ–ª—å —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è: {user.training_goal.value if user.training_goal else '–Ω–µ –≤–∫–∞–∑–∞–Ω–æ'}

{latest_stat.ai_analysis}
"""
            
            # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —É —Ñ–∞–π–ª
            with open(filepath, 'w', encoding='utf-8') as f:
                f.write(file_content)
            
            print(f"‚úÖ –ó–±–µ—Ä–µ–∂–µ–Ω–æ –∞–Ω–∞–ª—ñ–∑ –¥–ª—è {user.full_name} ‚Üí {filename}")
            extracted_count += 1
            
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ {user_id}: {e}")
    
    print(f"""
üìä –í–∏—Ç—è–≥–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ!

‚úÖ –£—Å–ø—ñ—à–Ω–æ –≤–∏—Ç—è–≥–Ω—É—Ç–æ: {extracted_count} –∞–Ω–∞–ª—ñ–∑—ñ–≤
‚ùå –ü–æ—Ä–æ–∂–Ω—ñ/–≤—ñ–¥—Å—É—Ç–Ω—ñ: {empty_count} 
üìÅ –ó–±–µ—Ä–µ–∂–µ–Ω–æ –≤ –ø–∞–ø—Ü—ñ: {analyses_dir}

–§–∞–π–ª–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–æ –∑ —ñ–º–µ–Ω–∞–º–∏: <user_id>_analysis.txt
""")

async def extract_specific_user_analysis(user_id: str):
    """
    –í–∏—Ç—è–≥—É—î AI –∞–Ω–∞–ª—ñ–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    """
    await init_db()
    
    print(f"üîç –®—É–∫–∞—é –∞–Ω–∞–ª—ñ–∑ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id}...")
    
    # –®—É–∫–∞—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    user = await User.find_one(User.telegram_id == user_id)
    if not user:
        print(f"‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        return
    
    # –®—É–∫–∞—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    statistics = await UserStatistics.find(UserStatistics.user_id == user_id).to_list()
    
    if not statistics:
        print(f"‚ùå –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è {user_id} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        return
    
    # –ë–µ—Ä–µ–º–æ –æ—Å—Ç–∞–Ω–Ω—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    latest_stat = max(statistics, key=lambda s: s.generated_at)
    
    if not latest_stat.ai_analysis:
        print(f"‚ùå AI –∞–Ω–∞–ª—ñ–∑ –¥–ª—è {user_id} –≤—ñ–¥—Å—É—Ç–Ω—ñ–π")
        return
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ –ø–∞–ø–∫—É —è–∫—â–æ —ó—ó –Ω–µ–º–∞—î
    analyses_dir = "extracted_ai_analyses"
    if not os.path.exists(analyses_dir):
        os.makedirs(analyses_dir)
    
    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ñ–∞–π–ª
    filename = f"{user_id}_analysis.txt"
    filepath = os.path.join(analyses_dir, filename)
    
    file_content = f"""AI –ê–Ω–∞–ª—ñ–∑ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: {user.full_name}
Telegram ID: {user_id}
Username: @{user.telegram_username or '–Ω–µ–º–∞—î'}
–¶—ñ–ª—å —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è: {user.training_goal.value if user.training_goal else '–Ω–µ –≤–∫–∞–∑–∞–Ω–æ'}

–ü–µ—Ä—ñ–æ–¥ –∞–Ω–∞–ª—ñ–∑—É: {latest_stat.period_type.value} 
–î–∞—Ç–∏: {latest_stat.period_start.strftime('%Y-%m-%d')} - {latest_stat.period_end.strftime('%Y-%m-%d')}

{'='*50}
AI –ê–ù–ê–õ–Ü–ó:
{'='*50}

{latest_stat.ai_analysis}
"""
    
    with open(filepath, 'w', encoding='utf-8') as f:
        f.write(file_content)
    
    print(f"‚úÖ –ê–Ω–∞–ª—ñ–∑ –∑–±–µ—Ä–µ–∂–µ–Ω–æ: {filepath}")
    
    # –¢–∞–∫–æ–∂ –≤–∏–≤–æ–¥–∏–º–æ –≤ –∫–æ–Ω—Å–æ–ª—å
    print(f"\n{'='*50}")
    print("–ê–ù–ê–õ–Ü–ó:")
    print('='*50)
    print(latest_stat.ai_analysis)
    print('='*50)

async def list_users_with_analyses():
    """
    –ü–æ–∫–∞–∑—É—î —Å–ø–∏—Å–æ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤, —É —è–∫–∏—Ö —î AI –∞–Ω–∞–ª—ñ–∑–∏
    """
    await init_db()
    
    print("üîç –®—É–∫–∞—é –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –∑ AI –∞–Ω–∞–ª—ñ–∑–∞–º–∏...")
    
    # –®—É–∫–∞—î–º–æ –≤—Å—ñ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑ AI –∞–Ω–∞–ª—ñ–∑–æ–º
    statistics_with_ai = await UserStatistics.find(
        UserStatistics.ai_analysis != None
    ).to_list()
    
    if not statistics_with_ai:
        print("‚ùå AI –∞–Ω–∞–ª—ñ–∑—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        return
    
    # –ì—Ä—É–ø—É—î–º–æ –ø–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞—Ö
    users_analyses = {}
    for stat in statistics_with_ai:
        if stat.user_id not in users_analyses:
            users_analyses[stat.user_id] = []
        users_analyses[stat.user_id].append(stat)
    
    print(f"\nüìã –ó–Ω–∞–π–¥–µ–Ω–æ {len(users_analyses)} –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –∑ AI –∞–Ω–∞–ª—ñ–∑–∞–º–∏:")
    print("-" * 80)
    
    for i, (user_id, analyses) in enumerate(users_analyses.items(), 1):
        # –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        user = await User.find_one(User.telegram_id == user_id)
        user_name = user.full_name if user else "–ù–µ–≤—ñ–¥–æ–º–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á"
        
        # –û—Å—Ç–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        latest = max(analyses, key=lambda s: s.generated_at)
        
        print(f"{i:2d}. {user_name}")
        print(f"    ID: {user_id}")
        print(f"    –ê–Ω–∞–ª—ñ–∑—ñ–≤: {len(analyses)}")
        print(f"    –û—Å—Ç–∞–Ω–Ω—ñ–π: {latest.generated_at.strftime('%Y-%m-%d %H:%M')}")
        print(f"    –ü–µ—Ä—ñ–æ–¥: {latest.period_start.strftime('%Y-%m-%d')} - {latest.period_end.strftime('%Y-%m-%d')}")
        print("-" * 80)

if __name__ == "__main__":
    import sys
    
    if len(sys.argv) > 1:
        command = sys.argv[1]
        
        if command == "list":
            print("üìã –ü–æ–∫–∞–∑ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –∑ AI –∞–Ω–∞–ª—ñ–∑–∞–º–∏...")
            asyncio.run(list_users_with_analyses())
            
        elif command == "user" and len(sys.argv) > 2:
            user_id = sys.argv[2]
            print(f"üîç –í–∏—Ç—è–≥–∞–Ω–Ω—è –∞–Ω–∞–ª—ñ–∑—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id}...")
            asyncio.run(extract_specific_user_analysis(user_id))
            
        elif command == "help":
            print("""
üîß –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è —Å–∫—Ä–∏–ø—Ç–∞:

python extract_ai_analyses.py           - –í–∏—Ç—è–≥–Ω—É—Ç–∏ –≤—Å—ñ AI –∞–Ω–∞–ª—ñ–∑–∏ —Ç–µ—Å—Ç–æ–≤–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
python extract_ai_analyses.py list      - –ü–æ–∫–∞–∑–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –∑ AI –∞–Ω–∞–ª—ñ–∑–∞–º–∏
python extract_ai_analyses.py user <id> - –í–∏—Ç—è–≥–Ω—É—Ç–∏ –∞–Ω–∞–ª—ñ–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
python extract_ai_analyses.py help      - –ü–æ–∫–∞–∑–∞—Ç–∏ —Ü—é –¥–æ–≤—ñ–¥–∫—É

–ü—Ä–∏–∫–ª–∞–¥–∏:
python extract_ai_analyses.py list
python extract_ai_analyses.py user stable_minor_issues_user

–§–∞–π–ª–∏ –∑–±–µ—Ä—ñ–≥–∞—é—Ç—å—Å—è –≤ –ø–∞–ø—Ü—ñ: extracted_ai_analyses/
""")
        else:
            print("‚ùå –ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞. –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π 'help' –¥–ª—è –¥–æ–≤—ñ–¥–∫–∏")
    else:
        print("üîç –í–∏—Ç—è–≥–∞–Ω–Ω—è AI –∞–Ω–∞–ª—ñ–∑—ñ–≤ —É—Å—ñ—Ö —Ç–µ—Å—Ç–æ–≤–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤...")
        asyncio.run(extract_ai_analyses())
        print("‚úÖ –ì–æ—Ç–æ–≤–æ!")