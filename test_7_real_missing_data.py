#!/usr/bin/env python3
"""
–ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —Ç–µ—Å—Ç–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö –¥–ª—è —Å—Ü–µ–Ω–∞—Ä—ñ—é 7:
–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –ø—Ä–æ–ø—É—Å–∫–∞—î –∑–∞–ø–æ–≤–Ω–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –ø–æ –∫—ñ–ª—å–∫–∞ –¥–Ω—ñ–≤ –ø—ñ–¥—Ä—è–¥.
–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –¥–ª—è –∂–∞—Ä—Ç—ñ–≤–ª–∏–≤–æ—ó –∫—Ä–∏—Ç–∏–∫–∏ –∑–∞ –ª—ñ–Ω–æ—Ç—É —É –≤–µ–¥–µ–Ω–Ω—ñ —â–æ–¥–µ–Ω–Ω–∏–∫–∞.
"""

import asyncio
from datetime import datetime, timedelta
from app.db.database import init_db
from app.db.models import (
    User, MorningQuiz, TrainingSession, UserStatistics, 
    PeriodType, TrainingGoal
)
from zoneinfo import ZoneInfo

async def create_real_missing_data_scenario():
    """
    –°—Ü–µ–Ω–∞—Ä—ñ–π 7: –°–ø—Ä–∞–≤–∂–Ω—ñ –ø—Ä–æ–ø—É—â–µ–Ω—ñ –¥–∞–Ω—ñ
    –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –ø—Ä–æ—Å—Ç–æ –Ω–µ –∑–∞–ø–æ–≤–Ω—é—î –¥–∞–Ω—ñ –ø–æ –∫—ñ–ª—å–∫–∞ –¥–Ω—ñ–≤ - –Ω—ñ –∫–≤—ñ–∑—ñ–≤, –Ω—ñ —Ç—Ä–µ–Ω—É–≤–∞–Ω—å
    """
    await init_db()
    
    test_user_id = "real_missing_data_user"
    
    # –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑ —Ü—ñ–ª–ª—é —Å—Ö—É–¥–Ω–µ–Ω–Ω—è
    test_user = User(
        telegram_id=test_user_id,
        full_name="–õ—ñ–Ω–∏–≤–∏–π –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –ó –ü—Ä–æ–ø—É—Å–∫–∞–º–∏",
        telegram_username="real_missing_data",
        is_active=True,
        is_verified=True,
        training_goal=TrainingGoal.LOSE_WEIGHT
    )
    await test_user.save()
    print(f"‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: {test_user.full_name}")
    
    # –ü–µ—Ä—ñ–æ–¥ (23 –≤–µ—Ä–µ—Å–Ω—è 2025, 10:00)
    start_date = datetime(2025, 10, 6, 10, 0, tzinfo=ZoneInfo("Europe/Kyiv"))
    
    # –ü–ª–∞–Ω –Ω–∞ 7 –¥–Ω—ñ–≤ - –¥–µ—è–∫—ñ –¥–Ω—ñ –≤–∑–∞–≥–∞–ª—ñ –ø—Ä–æ–ø—É—â–µ–Ω—ñ
    daily_plan = [
        # –î–µ–Ω—å 1 - –∑–∞–ø–æ–≤–Ω–∏–≤ –≤—Å–µ
        {"has_data": True, "stress": 3, "sleep": 7.0, "wellbeing": 6, "training": 6, "weight": 74.0},
        # –î–µ–Ω—å 2 - –∑–∞–ø–æ–≤–Ω–∏–≤ –≤—Å–µ
        {"has_data": True, "stress": 4, "sleep": 6.5, "wellbeing": 5, "training": 7, "weight": 73.8},
        # –î–µ–Ω—å 3 - –ü–†–û–ü–£–°–¢–ò–í –ü–û–í–ù–Ü–°–¢–Æ (–∑–∞–π–Ω—è—Ç–∏–π/–∑–∞–±—É–≤)
        {"has_data": False},
        # –î–µ–Ω—å 4 - –ü–†–û–ü–£–°–¢–ò–í –ü–û–í–ù–Ü–°–¢–Æ 
        {"has_data": False},
        # –î–µ–Ω—å 5 - –∑–≥–∞–¥–∞–≤ –ø—Ä–æ –±–æ—Ç, –∑–∞–ø–æ–≤–Ω–∏–≤
        {"has_data": True, "stress": 6, "sleep": 5.5, "wellbeing": 4, "training": 5, "weight": 74.2},
        # –î–µ–Ω—å 6 - –ó–ù–û–í–£ –ü–†–û–ü–£–°–¢–ò–í
        {"has_data": False},
        # –î–µ–Ω—å 7 - —Å–ø–æ—Ö–≤–∞—Ç–∏–≤—Å—è –≤ –∫—ñ–Ω—Ü—ñ —Ç–∏–∂–Ω—è
        {"has_data": True, "stress": 5, "sleep": 6.0, "wellbeing": 5, "training": 6, "weight": 74.0}
    ]
    
    training_sessions_count = 0
    morning_quizzes_count = 0
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ –¥–∞–Ω—ñ —Ç—ñ–ª—å–∫–∏ –¥–ª—è –¥–Ω—ñ–≤ –∫–æ–ª–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–∞–±—É–≤
    for day, data in enumerate(daily_plan):
        current_date = start_date + timedelta(days=day)
        
        if not data["has_data"]:
            print(f"‚ùå –î–µ–Ω—å {day + 1} ({current_date.date()}) - –¥–∞–Ω—ñ –ø—Ä–æ–ø—É—â–µ–Ω—ñ")
            continue
        
        # –†–∞–Ω–∫–æ–≤—ñ –∫–≤—ñ–∑–∏ —Ç—ñ–ª—å–∫–∏ –∫–æ–ª–∏ —î –¥–∞–Ω—ñ
        morning_quiz = MorningQuiz(
            user_id=test_user_id,
            how_do_you_feel_today=data["wellbeing"],
            how_many_hours_of_sleep=data["sleep"],
            weight=data["weight"],
            is_going_to_gym=True,
            gym_attendance_time=current_date.replace(hour=19, minute=0),
            completed=True,
            created_at=current_date.replace(hour=8, minute=30)
        )
        await morning_quiz.save()
        morning_quizzes_count += 1
        
        # –¢—Ä–µ–Ω—É–≤–∞–ª—å–Ω—ñ —Å–µ—Å—ñ—ó —Ç—ñ–ª—å–∫–∏ –∫–æ–ª–∏ —î –¥–∞–Ω—ñ
        training_session = TrainingSession(
            user_id=test_user_id,
            how_do_you_feel_before=data["wellbeing"],
            how_hard_was_training=data["training"],
            do_you_have_any_pain=False,
            training_started_at=current_date.replace(hour=19, minute=0),
            training_ended_at=current_date.replace(hour=20, minute=15),
            training_duration=75,
            stress_level=data["stress"],
            do_you_have_soreness=False,
            completed=True,
            created_at=current_date.replace(hour=19, minute=0)
        )
        await training_session.save()
        training_sessions_count += 1
        
        print(f"‚úÖ –î–µ–Ω—å {day + 1} ({current_date.date()}) - –¥–∞–Ω—ñ –∑–∞–ø–æ–≤–Ω–µ–Ω—ñ")
    
    print(f"‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ {morning_quizzes_count} —Ä–∞–Ω–∫–æ–≤–∏—Ö –∫–≤—ñ–∑—ñ–≤ –∑ 7 –º–æ–∂–ª–∏–≤–∏—Ö")
    print(f"‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ {training_sessions_count} —Ç—Ä–µ–Ω—É–≤–∞–ª—å–Ω–∏—Ö —Å–µ—Å—ñ–π –∑ 7 –º–æ–∂–ª–∏–≤–∏—Ö")
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    end_date = start_date + timedelta(days=6, hours=23, minutes=59, seconds=59)
    
    # –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ –º–µ—Ç—Ä–∏–∫–∏ —Ç—ñ–ª—å–∫–∏ –ø–æ –Ω–∞—è–≤–Ω–∏–º –¥–∞–Ω–∏–º
    available_data = [d for d in daily_plan if d["has_data"]]
    missing_days = len([d for d in daily_plan if not d["has_data"]])
    
    if not available_data:
        print("‚ùå –ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏!")
        return
    
    stress_avg = sum(d["stress"] for d in available_data) / len(available_data)  # 4.5
    sleep_avg = sum(d["sleep"] for d in available_data) / len(available_data)    # 6.25
    wellbeing_avg = sum(d["wellbeing"] for d in available_data) / len(available_data)  # 5.0
    training_avg = sum(d["training"] for d in available_data) / len(available_data)    # 6.0
    
    start_weight = available_data[0]["weight"]
    end_weight = available_data[-1]["weight"]
    weight_change = end_weight - start_weight  # 0.0
    
    user_statistics = UserStatistics(
        user_id=test_user_id,
        period_type=PeriodType.WEEKLY,
        period_start=start_date,
        period_end=end_date,
        total_training_sessions=training_sessions_count,
        total_morning_quizzes=morning_quizzes_count,
        
        # –°—Ç—Ä–µ—Å: —Å–µ—Ä–µ–¥–Ω—ñ–π –∑–∞ –Ω–∞—è–≤–Ω–∏–º–∏ –¥–∞–Ω–∏–º–∏
        stress_data={
            "chart_type": "line",
            "average": stress_avg,
            "trend": "incomplete_week",
            "missing_days": missing_days,
            "data_points": [
                {"date": (start_date + timedelta(days=i)).strftime("%Y-%m-%d"), 
                 "value": daily_plan[i]["stress"] if daily_plan[i]["has_data"] else None}
                for i in range(len(daily_plan))
            ]
        },
        
        # –¢—Ä–µ–Ω—É–≤–∞–Ω–Ω—è: —Å–µ—Ä–µ–¥–Ω—î –∑–∞ –Ω–∞—è–≤–Ω–∏–º–∏ –¥–∞–Ω–∏–º–∏
        warehouse_data={
            "chart_type": "bar",
            "average": training_avg,
            "trend": "incomplete_week",
            "missing_days": missing_days,
            "data_points": [
                {"date": (start_date + timedelta(days=i)).strftime("%Y-%m-%d"), 
                 "value": daily_plan[i]["training"] if daily_plan[i]["has_data"] else None}
                for i in range(len(daily_plan))
            ]
        },
        
        # –°–æ–Ω: —Å–µ—Ä–µ–¥–Ω—ñ–π –∑–∞ –Ω–∞—è–≤–Ω–∏–º–∏ –¥–∞–Ω–∏–º–∏
        sleep_data={
            "chart_type": "line",
            "average": sleep_avg,
            "trend": "incomplete_week",
            "missing_days": missing_days,
            "total_sleep_hours": sum(d["sleep"] for d in available_data),
            "data_points": [
                {"date": (start_date + timedelta(days=i)).strftime("%Y-%m-%d"), 
                 "value": daily_plan[i]["sleep"] if daily_plan[i]["has_data"] else None}
                for i in range(len(daily_plan))
            ]
        },
        
        # –°–∞–º–æ–ø–æ—á—É—Ç—Ç—è: —Å–µ—Ä–µ–¥–Ω—î –∑–∞ –Ω–∞—è–≤–Ω–∏–º–∏ –¥–∞–Ω–∏–º–∏
        wellbeing_data={
            "chart_type": "line",
            "average": wellbeing_avg,
            "trend": "incomplete_week",
            "missing_days": missing_days,
            "data_points": [
                {"date": (start_date + timedelta(days=i)).strftime("%Y-%m-%d"), 
                 "value": daily_plan[i]["wellbeing"] if daily_plan[i]["has_data"] else None}
                for i in range(len(daily_plan))
            ]
        },
        
        # –í–∞–≥–∞: —Ç—ñ–ª—å–∫–∏ –¥–Ω—ñ –∫–æ–ª–∏ —î –¥–∞–Ω—ñ
        weight_data={
            "chart_type": "line",
            "average": round((start_weight + end_weight) / 2, 1),
            "trend": "incomplete_data",
            "start_weight": start_weight,
            "end_weight": end_weight,
            "weight_change": round(weight_change, 1),
            "missing_days": missing_days,
            "data_points": [
                {"date": (start_date + timedelta(days=i)).strftime("%Y-%m-%d"), 
                 "value": daily_plan[i]["weight"] if daily_plan[i]["has_data"] else None}
                for i in range(len(daily_plan))
            ]
        },
        
        is_complete=False,  # –ù–ï –∑–∞–≤–µ—Ä—à–µ–Ω–æ —á–µ—Ä–µ–∑ –ø—Ä–æ–ø—É—Å–∫–∏
        generated_at=datetime.now(ZoneInfo("Europe/Kyiv"))
    )
    
    await user_statistics.save()
    print(f"‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –ø–µ—Ä—ñ–æ–¥—É {start_date.date()} - {end_date.date()}")
    
    # –í–∏–≤–æ–¥–∏–º–æ –ø—ñ–¥—Å—É–º–æ–∫
    print(f"""
üìä –°—Ü–µ–Ω–∞—Ä—ñ–π 7 - –°–ø—Ä–∞–≤–∂–Ω—ñ –ø—Ä–æ–ø—É—â–µ–Ω—ñ –¥–∞–Ω—ñ:
üßò‚Äç‚ôÇÔ∏è –°–µ—Ä–µ–¥–Ω—ñ–π —Å—Ç—Ä–µ—Å: {stress_avg:.1f} (—Ç—ñ–ª—å–∫–∏ {len(available_data)} –¥–Ω—ñ–≤ –∑ 7!)
üí™ –°–∫–ª–∞–¥–Ω—ñ—Å—Ç—å —Ç—Ä–µ–Ω—É–≤–∞–Ω—å: {training_avg:.1f} (–ø—Ä–æ–ø—É—â–µ–Ω–æ {missing_days} —Ç—Ä–µ–Ω—É–≤–∞–Ω—å!)
üò¥ –°–µ—Ä–µ–¥–Ω—ñ–π —Å–æ–Ω: {sleep_avg:.1f} –≥–æ–¥–∏–Ω (–Ω–µ–ø–æ–≤–Ω—ñ –¥–∞–Ω—ñ)
üòÑ –ó–∞–≥–∞–ª—å–Ω–µ —Å–∞–º–æ–ø–æ—á—É—Ç—Ç—è: {wellbeing_avg:.1f} (—Ñ—Ä–∞–≥–º–µ–Ω—Ç–∞—Ä–Ω–æ)
üî• –ó–º—ñ–Ω–∞ –≤–∞–≥–∏: {weight_change:.1f} –∫–≥ (–Ω–µ–º–æ–∂–ª–∏–≤–æ —Ç–æ—á–Ω–æ –æ—Ü—ñ–Ω–∏—Ç–∏)
üéØ –¶—ñ–ª—å: {test_user.training_goal.value}
‚ùå –ü–†–û–ü–£–©–ï–ù–û –î–ù–Ü–í: {missing_days} –∑ 7 ({missing_days/7*100:.0f}%)

–û—á—ñ–∫—É–≤–∞–Ω–∏–π –∞–Ω–∞–ª—ñ–∑: –∂–∞—Ä—Ç—ñ–≤–ª–∏–≤–∞ –∫—Ä–∏—Ç–∏–∫–∞ –∑–∞ –ª—ñ–Ω–æ—Ç—É —É –≤–µ–¥–µ–Ω–Ω—ñ —â–æ–¥–µ–Ω–Ω–∏–∫–∞
+ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –ø—Ä–æ –≤–∞–∂–ª–∏–≤—ñ—Å—Ç—å —Ä–µ–≥—É–ª—è—Ä–Ω–æ—Å—Ç—ñ –¥–∞–Ω–∏—Ö –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É
""")

if __name__ == "__main__":
    print("–ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —Ç–µ—Å—Ç–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö –¥–ª—è –°—Ü–µ–Ω–∞—Ä—ñ—é 7 (–°–ø—Ä–∞–≤–∂–Ω—ñ –ø—Ä–æ–ø—É—â–µ–Ω—ñ –¥–∞–Ω—ñ)...")
    asyncio.run(create_real_missing_data_scenario())
    print("‚úÖ –°—Ü–µ–Ω–∞—Ä—ñ–π 7 –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")