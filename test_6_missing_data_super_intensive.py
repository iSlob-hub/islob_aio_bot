#!/usr/bin/env python3
"""
–ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —Ç–µ—Å—Ç–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö –¥–ª—è —Å—Ü–µ–Ω–∞—Ä—ñ—é 6:
–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –ø—Ä–æ–ø—É—Å—Ç–∏–≤ —á–∞—Å—Ç–∏–Ω—É –¥–∞–Ω–∏—Ö (—Å—Ç—Ä–µ—Å, —Å–∞–º–æ–ø–æ—á—É—Ç—Ç—è), —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è —Å—É–ø–µ—Ä—ñ–Ω—Ç–µ–Ω—Å–∏–≤–Ω—ñ, 
—Å–æ–Ω –Ω–µ–¥–æ—Å—Ç–∞—Ç–Ω—ñ–π, –≤–∞–≥–∞ —Å—Ç–∞–±—ñ–ª—å–Ω–∞.
–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –¥–ª—è –∂–∞—Ä—Ç—ñ–≤–ª–∏–≤–æ—ó –∫—Ä–∏—Ç–∏–∫–∏ –ø—Ä–æ–ø—É—Å–∫—ñ–≤ —É –¥–∞–Ω–∏—Ö —ñ –ø–æ—Ä–∞–¥ –ø–æ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—é.
"""

import asyncio
from datetime import datetime, timedelta
from app.db.database import init_db
from app.db.models import (
    User, MorningQuiz, TrainingSession, UserStatistics, 
    PeriodType, TrainingGoal
)
from zoneinfo import ZoneInfo

async def create_missing_data_super_intensive_scenario():
    """
    –°—Ü–µ–Ω–∞—Ä—ñ–π 6: –ü—Ä–æ–ø—É—â–µ–Ω—ñ –¥–∞–Ω—ñ –∑ —Å—É–ø–µ—Ä—ñ–Ω—Ç–µ–Ω—Å–∏–≤–Ω–∏–º–∏ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è–º–∏
    –ü—Ä–æ–ø—É—Å–∫–∏ –≤ —Å—Ç—Ä–µ—Å—ñ/—Å–∞–º–æ–ø–æ—á—É—Ç—Ç—ñ, —Å—É–ø–µ—Ä—ñ–Ω—Ç–µ–Ω—Å–∏–≤–Ω—ñ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è, –Ω–µ–¥–æ—Å—Ç–∞—Ç–Ω—ñ–π —Å–æ–Ω, —Å—Ç–∞–±—ñ–ª—å–Ω–∞ –≤–∞–≥–∞
    """
    await init_db()
    
    test_user_id = "missing_data_super_intensive_user"
    
    # –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑ —Ü—ñ–ª–ª—é –Ω–∞–±–æ—Ä—É –º'—è–∑–æ–≤–æ—ó –º–∞—Å–∏
    test_user = User(
        telegram_id=test_user_id,
        full_name="–ü—Ä–æ–ø—É—â–µ–Ω—ñ –î–∞–Ω—ñ –°—É–ø–µ—Ä—ñ–Ω—Ç–µ–Ω—Å–∏–≤",
        telegram_username="missing_data_super_intensive",
        is_active=True,
        is_verified=True,
        training_goal=TrainingGoal.BUILD_MUSCLE
    )
    await test_user.save()
    print(f"‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: {test_user.full_name}")
    
    # –ü–µ—Ä—ñ–æ–¥ (22 –≤–µ—Ä–µ—Å–Ω—è 2025, 21:44)
    start_date = datetime(2025, 10, 6, 21, 9, tzinfo=ZoneInfo("Europe/Kyiv"))
    
    # –î–∞–Ω—ñ –∑ –ø—Ä–æ–ø—É—Å–∫–∞–º–∏ —Ç–∞ —Å—É–ø–µ—Ä—ñ–Ω—Ç–µ–Ω—Å–∏–≤–Ω–∏–º–∏ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è–º–∏ (7 –¥–Ω—ñ–≤)
    daily_data = [
        # –î–µ–Ω—å 1 - –ø–æ—á–∞—Ç–æ–∫, —î –≤—Å—ñ –¥–∞–Ω—ñ
        {"stress": 4, "sleep": 5.5, "wellbeing": 6, "training": 10, "weight": 80.0, "has_stress": True, "has_wellbeing": True},
        # –î–µ–Ω—å 2 - –ø—Ä–æ–ø—É—Å—Ç–∏–≤ —Å—Ç—Ä–µ—Å
        {"stress": None, "sleep": 6.0, "wellbeing": 5, "training": 9, "weight": 80.1, "has_stress": False, "has_wellbeing": True},
        # –î–µ–Ω—å 3 - –ø—Ä–æ–ø—É—Å—Ç–∏–≤ —Å–∞–º–æ–ø–æ—á—É—Ç—Ç—è
        {"stress": 6, "sleep": 5.0, "wellbeing": None, "training": 10, "weight": 79.9, "has_stress": True, "has_wellbeing": False},
        # –î–µ–Ω—å 4 - –ø—Ä–æ–ø—É—Å—Ç–∏–≤ –æ–±–∏–¥–≤–∞
        {"stress": None, "sleep": 6.5, "wellbeing": None, "training": 9, "weight": 80.0, "has_stress": False, "has_wellbeing": False},
        # –î–µ–Ω—å 5 - –∑–Ω–æ–≤—É –ø—Ä–æ–ø—É—Å–∫–∏
        {"stress": None, "sleep": 5.5, "wellbeing": 4, "training": 10, "weight": 80.2, "has_stress": False, "has_wellbeing": True},
        # –î–µ–Ω—å 6 - –ø—Ä–æ–ø—É—Å—Ç–∏–≤ —Å–∞–º–æ–ø–æ—á—É—Ç—Ç—è
        {"stress": 7, "sleep": 5.0, "wellbeing": None, "training": 9, "weight": 79.8, "has_stress": True, "has_wellbeing": False},
        # –î–µ–Ω—å 7 - –Ω–∞—Ä–µ—à—Ç—ñ –∑–∞–ø–æ–≤–Ω–∏–≤ –≤—Å—ñ –¥–∞–Ω—ñ
        {"stress": 5, "sleep": 6.0, "wellbeing": 3, "training": 10, "weight": 80.0, "has_stress": True, "has_wellbeing": True}
    ]
    
    training_sessions_count = 0
    morning_quizzes_count = 0
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ –¥–∞–Ω—ñ –ø–æ –¥–Ω—è—Ö –∑ –ø—Ä–æ–ø—É—Å–∫–∞–º–∏
    for day, data in enumerate(daily_data):
        current_date = start_date + timedelta(days=day)
        
        # –†–∞–Ω–∫–æ–≤—ñ –∫–≤—ñ–∑–∏ - –∑–∞–≤–∂–¥–∏ —î –≤–∞–≥–∞ —ñ —Å–æ–Ω
        morning_quiz = MorningQuiz(
            user_id=test_user_id,
            how_do_you_feel_today=data["wellbeing"] if data["has_wellbeing"] else 5,  # –î–µ—Ñ–æ–ª—Ç —è–∫—â–æ –ø—Ä–æ–ø—É—â–µ–Ω–æ
            how_many_hours_of_sleep=data["sleep"],
            weight=data["weight"],
            is_going_to_gym=True,  # –ó–∞–≤–∂–¥–∏ –π–¥–µ —Ç—Ä–µ–Ω—É–≤–∞—Ç–∏—Å—è
            gym_attendance_time=current_date.replace(hour=20, minute=0),
            completed=True,
            created_at=current_date.replace(hour=8, minute=0)
        )
        await morning_quiz.save()
        morning_quizzes_count += 1
        
        # –°—É–ø–µ—Ä—ñ–Ω—Ç–µ–Ω—Å–∏–≤–Ω—ñ —Ç—Ä–µ–Ω—É–≤–∞–ª—å–Ω—ñ —Å–µ—Å—ñ—ó - –∞–ª–µ –ø—Ä–æ–ø—É—Å–∫–∞—î –¥–∞–Ω—ñ
        training_session = TrainingSession(
            user_id=test_user_id,
            how_do_you_feel_before=data["wellbeing"] if data["has_wellbeing"] else 5,
            how_hard_was_training=data["training"],
            do_you_have_any_pain=True if data["training"] >= 10 else False,
            training_started_at=current_date.replace(hour=20, minute=0),
            training_ended_at=current_date.replace(hour=22, minute=0),  # 2 –≥–æ–¥–∏–Ω–∏!
            training_duration=120,  # –î—É–∂–µ –¥–æ–≤–≥—ñ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è
            stress_level=data["stress"] if data["has_stress"] else 5,  # –î–µ—Ñ–æ–ª—Ç —è–∫—â–æ –ø—Ä–æ–ø—É—â–µ–Ω–æ
            do_you_have_soreness=True,  # –ó–∞–≤–∂–¥–∏ –±–æ–ª–∏—Ç—å –≤—ñ–¥ —Ç–∞–∫–æ—ó —ñ–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—ñ
            completed=True,
            created_at=current_date.replace(hour=20, minute=0)
        )
        await training_session.save()
        training_sessions_count += 1
    
    print(f"‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ {morning_quizzes_count} —Ä–∞–Ω–∫–æ–≤–∏—Ö –∫–≤—ñ–∑—ñ–≤")
    print(f"‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ {training_sessions_count} —Ç—Ä–µ–Ω—É–≤–∞–ª—å–Ω–∏—Ö —Å–µ—Å—ñ–π")
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    end_date = start_date + timedelta(days=6, hours=23, minutes=59, seconds=59)
    
    # –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ –º–µ—Ç—Ä–∏–∫–∏ —Ç—ñ–ª—å–∫–∏ –ø–æ –Ω–∞—è–≤–Ω–∏–º –¥–∞–Ω–∏–º
    stress_values = [d["stress"] for d in daily_data if d["has_stress"] and d["stress"] is not None]
    wellbeing_values = [d["wellbeing"] for d in daily_data if d["has_wellbeing"] and d["wellbeing"] is not None]
    
    stress_avg = sum(stress_values) / len(stress_values) if stress_values else 5.0  # 5.5
    sleep_avg = sum(d["sleep"] for d in daily_data) / len(daily_data)    # 5.7
    wellbeing_avg = sum(wellbeing_values) / len(wellbeing_values) if wellbeing_values else 5.0  # 4.5
    training_avg = sum(d["training"] for d in daily_data) / len(daily_data)    # 9.6
    
    start_weight = daily_data[0]["weight"]
    end_weight = daily_data[-1]["weight"]
    weight_change = end_weight - start_weight  # 0.0
    
    user_statistics = UserStatistics(
        user_id=test_user_id,
        period_type=PeriodType.WEEKLY,
        period_start=start_date,
        period_end=end_date,
        total_training_sessions=training_sessions_count,
        total_morning_quizzes=morning_quizzes_count,
        
        # –°—Ç—Ä–µ—Å: —Å–µ—Ä–µ–¥–Ω—ñ–π 5.5, –∞–ª–µ –ë–ê–ì–ê–¢–û –ü–†–û–ü–£–°–ö–Ü–í
        stress_data={
            "chart_type": "line",
            "average": stress_avg,
            "trend": "incomplete_data",
            "missing_days": len([d for d in daily_data if not d["has_stress"]]),
            "data_points": [
                {"date": (start_date + timedelta(days=i)).strftime("%Y-%m-%d"), 
                 "value": daily_data[i]["stress"] if daily_data[i]["has_stress"] else None}
                for i in range(len(daily_data))
            ]
        },
        
        # –¢—Ä–µ–Ω—É–≤–∞–Ω–Ω—è: –°–£–ü–ï–†–Ü–ù–¢–ï–ù–°–ò–í–ù–Ü 9.6, –ø—ñ–∫ –¥–æ 10
        warehouse_data={
            "chart_type": "bar",
            "average": 9.6,
            "trend": "super_intensive",
            "data_points": [
                {"date": (start_date + timedelta(days=i)).strftime("%Y-%m-%d"), "value": daily_data[i]["training"]}
                for i in range(len(daily_data))
            ]
        },
        
        # –°–æ–Ω: –Ω–µ–¥–æ—Å—Ç–∞—Ç–Ω—ñ–π 5.7 –≥–æ–¥–∏–Ω –ø—Ä–∏ —Ç–∞–∫—ñ–π —ñ–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—ñ
        sleep_data={
            "chart_type": "line",
            "average": 5.7,
            "trend": "insufficient_for_intensity",
            "total_sleep_hours": sum(d["sleep"] for d in daily_data),
            "data_points": [
                {"date": (start_date + timedelta(days=i)).strftime("%Y-%m-%d"), "value": daily_data[i]["sleep"]}
                for i in range(len(daily_data))
            ]
        },
        
        # –°–∞–º–æ–ø–æ—á—É—Ç—Ç—è: 4.5, –∞–ª–µ –ë–ê–ì–ê–¢–û –ü–†–û–ü–£–°–ö–Ü–í
        wellbeing_data={
            "chart_type": "line",
            "average": wellbeing_avg,
            "trend": "incomplete_data",
            "missing_days": len([d for d in daily_data if not d["has_wellbeing"]]),
            "data_points": [
                {"date": (start_date + timedelta(days=i)).strftime("%Y-%m-%d"), 
                 "value": daily_data[i]["wellbeing"] if daily_data[i]["has_wellbeing"] else None}
                for i in range(len(daily_data))
            ]
        },
        
        # –í–∞–≥–∞: —Å—Ç–∞–±—ñ–ª—å–Ω–∞ ¬±0.4–∫–≥
        weight_data={
            "chart_type": "line",
            "average": round((start_weight + end_weight) / 2, 1),
            "trend": "stable",
            "start_weight": start_weight,
            "end_weight": end_weight,
            "weight_change": round(weight_change, 1),
            "data_points": [
                {"date": (start_date + timedelta(days=i)).strftime("%Y-%m-%d"), "value": daily_data[i]["weight"]}
                for i in range(len(daily_data))
            ]
        },
        
        is_complete=False,  # –ù–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —á–µ—Ä–µ–∑ –ø—Ä–æ–ø—É—Å–∫–∏
        generated_at=datetime.now(ZoneInfo("Europe/Kyiv"))
    )
    
    await user_statistics.save()
    print(f"‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –ø–µ—Ä—ño–¥—É {start_date.date()} - {end_date.date()}")
    
    # –í–∏–≤–æ–¥–∏–º–æ –ø—ñ–¥—Å—É–º–æ–∫
    stress_missing = len([d for d in daily_data if not d["has_stress"]])
    wellbeing_missing = len([d for d in daily_data if not d["has_wellbeing"]])
    
    print(f"""
üìä –°—Ü–µ–Ω–∞—Ä—ñ–π 6 - –ü—Ä–æ–ø—É—â–µ–Ω—ñ –¥–∞–Ω—ñ –∑ —Å—É–ø–µ—Ä—ñ–Ω—Ç–µ–Ω—Å–∏–≤–Ω–∏–º–∏ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è–º–∏:
üßò‚Äç‚ôÇÔ∏è –°–µ—Ä–µ–¥–Ω—ñ–π —Å—Ç—Ä–µ—Å: {stress_avg:.1f} (–ü–†–û–ü–£–©–ï–ù–û {stress_missing} –¥–Ω—ñ–≤ –∑ 7!)
üí™ –°–∫–ª–∞–¥–Ω—ñ—Å—Ç—å —Ç—Ä–µ–Ω—É–≤–∞–Ω—å: {training_avg:.1f} (–°–£–ü–ï–†–Ü–ù–¢–ï–ù–°–ò–í–ù–Ü, –ø—ñ–∫ 10)
üò¥ –°–µ—Ä–µ–¥–Ω—ñ–π —Å–æ–Ω: {sleep_avg:.1f} –≥–æ–¥–∏–Ω (–ù–ï–î–û–°–¢–ê–¢–ù–¨–û –ø—Ä–∏ —Ç–∞–∫—ñ–π —ñ–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—ñ)
üòÑ –ó–∞–≥–∞–ª—å–Ω–µ —Å–∞–º–æ–ø–æ—á—É—Ç—Ç—è: {wellbeing_avg:.1f} (–ü–†–û–ü–£–©–ï–ù–û {wellbeing_missing} –¥–Ω—ñ–≤ –∑ 7!)
üî• –ó–º—ñ–Ω–∞ –≤–∞–≥–∏: {weight_change:.1f} –∫–≥ (—Å—Ç–∞–±—ñ–ª—å–Ω–∞)
üéØ –¶—ñ–ª—å: {test_user.training_goal.value}

–û—á—ñ–∫—É–≤–∞–Ω–∏–π –∞–Ω–∞–ª—ñ–∑: –∂–∞—Ä—Ç—ñ–≤–ª–∏–≤–∞ –∫—Ä–∏—Ç–∏–∫–∞ –ø—Ä–æ–ø—É—Å–∫—ñ–≤ —É –¥–∞–Ω–∏—Ö 
+ –∑–∞—Å—Ç–µ—Ä–µ–∂–µ–Ω–Ω—è –ø—Ä–æ –Ω–µ–¥–æ—Å—Ç–∞—Ç–Ω—ñ–π —Å–æ–Ω –ø—Ä–∏ —Å—É–ø–µ—Ä—ñ–Ω—Ç–µ–Ω—Å–∏–≤–Ω–∏—Ö —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è—Ö
""")

if __name__ == "__main__":
    print("–ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —Ç–µ—Å—Ç–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö –¥–ª—è –°—Ü–µ–Ω–∞—Ä—ñ—é 6 (–ü—Ä–æ–ø—É—â–µ–Ω—ñ –¥–∞–Ω—ñ –∑ —Å—É–ø–µ—Ä—ñ–Ω—Ç–µ–Ω—Å–∏–≤–Ω–∏–º–∏ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è–º–∏)...")
    asyncio.run(create_missing_data_super_intensive_scenario())
    print("‚úÖ –°—Ü–µ–Ω–∞—Ä—ñ–π 6 –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")