import asyncio
import sys
import os
from aiogram import Bot
from app.config import settings
from app.db.database import init_db
from app.db.models import User
from dotenv import load_dotenv

load_dotenv()

def read_message_from_file(file_path: str) -> str:
    """
    –ß–∏—Ç–∞—î —Ç–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ —Ñ–∞–π–ª—É
    
    Args:
        file_path: –®–ª—è—Ö –¥–æ —Ñ–∞–π–ª—É –∑ —Ç–µ–∫—Å—Ç–æ–º –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        
    Returns:
        –¢–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–±–æ –ø–æ–º–∏–ª–∫—É
    """
    try:
        if not os.path.exists(file_path):
            return f"‚ùå –§–∞–π–ª {file_path} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ"
        
        with open(file_path, 'r', encoding='utf-8') as f:
            message = f.read().strip()
        
        if not message:
            return f"‚ùå –§–∞–π–ª {file_path} –ø–æ—Ä–æ–∂–Ω—ñ–π"
        
        print(f"üìÑ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ —Ñ–∞–π–ª—É {file_path} ({len(message)} —Å–∏–º–≤–æ–ª—ñ–≤)")
        return message
        
    except Exception as e:
        return f"‚ùå –ü–æ–º–∏–ª–∫–∞ —á–∏—Ç–∞–Ω–Ω—è —Ñ–∞–π–ª—É {file_path}: {e}"

async def send_message_to_user(user_id: str, message: str, parse_mode: str = "HTML"):
    """
    –í—ñ–¥–ø—Ä–∞–≤–ª—è—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
    
    Args:
        user_id: Telegram ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        message: –¢–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        parse_mode: –†–µ–∂–∏–º –ø–∞—Ä—Å–∏–Ω–≥—É (HTML, Markdown, None)
    """
    bot = Bot(token=os.environ.get("BOT_TOKEN"))
    
    try:
        await bot.send_message(
            chat_id=user_id,
            text=message,
            parse_mode=parse_mode
        )
        print(f"‚úÖ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {user_id}")
        return True
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {user_id}: {e}")
        return False
    finally:
        await bot.session.close()

async def send_message_by_username(username: str, message: str, parse_mode: str = "HTML"):
    """
    –í—ñ–¥–ø—Ä–∞–≤–ª—è—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É –∑–∞ username
    
    Args:
        username: Username –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (–±–µ–∑ @)
        message: –¢–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        parse_mode: –†–µ–∂–∏–º –ø–∞—Ä—Å–∏–Ω–≥—É
    """
    await init_db()
    
    # –®—É–∫–∞—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑–∞ username
    user = await User.find_one(User.telegram_username == username)
    
    if not user:
        print(f"‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ username '{username}' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö")
        return False
    
    print(f"üë§ –ó–Ω–∞–π–¥–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: {user.full_name} (@{user.telegram_username}) - ID: {user.telegram_id}")
    
    return await send_message_to_user(user.telegram_id, message, parse_mode)

async def list_users(limit: int = 20, active_only: bool = False):
    """
    –ü–æ–∫–∞–∑—É—î —Å–ø–∏—Å–æ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
    
    Args:
        limit: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –¥–ª—è –ø–æ–∫–∞–∑—É
        active_only: –ü–æ–∫–∞–∑—É–≤–∞—Ç–∏ —Ç—ñ–ª—å–∫–∏ –∞–∫—Ç–∏–≤–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
    """
    await init_db()
    
    print(f"üìã –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ (–ª—ñ–º—ñ—Ç: {limit}, —Ç—ñ–ª—å–∫–∏ –∞–∫—Ç–∏–≤–Ω—ñ: {active_only})...")
    
    query = User.find()
    if active_only:
        query = query.find(User.is_active == True)
    
    users = await query.limit(limit).to_list()
    
    if not users:
        print("‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        return
    
    print(f"\nüë• –ó–Ω–∞–π–¥–µ–Ω–æ {len(users)} –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤:")
    print("-" * 80)
    
    for i, user in enumerate(users, 1):
        status = "üü¢ –ê–∫—Ç–∏–≤–Ω–∏–π" if user.is_active else "üî¥ –ù–µ–∞–∫—Ç–∏–≤–Ω–∏–π"
        verified = "‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–∏–π" if user.is_verified else "‚ùå –ù–µ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–∏–π"
        username = f"@{user.telegram_username}" if user.telegram_username else "–ù–µ–º–∞—î username"
        
        print(f"{i:2d}. {user.full_name}")
        print(f"    ID: {user.telegram_id}")
        print(f"    Username: {username}")
        print(f"    –°—Ç–∞—Ç—É—Å: {status} | {verified}")
        print("-" * 80)

async def send_broadcast_message(message: str, active_only: bool = True, parse_mode: str = "HTML"):
    """
    –í—ñ–¥–ø—Ä–∞–≤–ª—è—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—Å—ñ–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º (—Ä–æ–∑—Å–∏–ª–∫–∞)
    
    Args:
        message: –¢–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        active_only: –ù–∞–¥—Å–∏–ª–∞—Ç–∏ —Ç—ñ–ª—å–∫–∏ –∞–∫—Ç–∏–≤–Ω–∏–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º
        parse_mode: –†–µ–∂–∏–º –ø–∞—Ä—Å–∏–Ω–≥—É
    """
    await init_db()
    
    print(f"üì¢ –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ä–æ–∑—Å–∏–ª–∫–∏ (—Ç—ñ–ª—å–∫–∏ –∞–∫—Ç–∏–≤–Ω—ñ: {active_only})...")
    
    query = User.find()
    if active_only:
        query = query.find(User.is_active == True)
    
    users = await query.to_list()
    
    if not users:
        print("‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –¥–ª—è —Ä–æ–∑—Å–∏–ª–∫–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        return
    
    print(f"üë• –ó–Ω–∞–π–¥–µ–Ω–æ {len(users)} –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –¥–ª—è —Ä–æ–∑—Å–∏–ª–∫–∏")
    
    # –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
    confirm = input(f"‚ö†Ô∏è –í–∏ –¥—ñ–π—Å–Ω–æ —Ö–æ—á–µ—Ç–µ –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è {len(users)} –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º? (yes/no): ")
    if confirm.lower() not in ['yes', 'y', '—Ç–∞–∫', '—Ç']:
        print("‚ùå –†–æ–∑—Å–∏–ª–∫—É —Å–∫–∞—Å–æ–≤–∞–Ω–æ")
        return
    
    bot = Bot(token=os.environ.get("BOT_TOKEN"))
    
    success_count = 0
    failed_count = 0
    
    print("üì§ –ü–æ—á–∏–Ω–∞—é —Ä–æ–∑—Å–∏–ª–∫—É...")
    
    for i, user in enumerate(users, 1):
        try:
            await bot.send_message(
                chat_id=user.telegram_id,
                text=message,
                parse_mode=parse_mode
            )
            success_count += 1
            print(f"‚úÖ {i}/{len(users)} - {user.full_name} ({user.telegram_id})")
            
            # –ù–µ–≤–µ–ª–∏–∫–∞ –∑–∞—Ç—Ä–∏–º–∫–∞ –º—ñ–∂ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º–∏ —â–æ–± –Ω–µ —Å–ø–∞–º–∏—Ç–∏
            await asyncio.sleep(0.1)
            
        except Exception as e:
            failed_count += 1
            print(f"‚ùå {i}/{len(users)} - {user.full_name} ({user.telegram_id}): {e}")
    
    await bot.session.close()
    
    print(f"""
üìä –†–æ–∑—Å–∏–ª–∫—É –∑–∞–≤–µ—Ä—à–µ–Ω–æ!
‚úÖ –£—Å–ø—ñ—à–Ω–æ: {success_count}
‚ùå –ü–æ–º–∏–ª–æ–∫: {failed_count}
üìà –í—Å—å–æ–≥–æ: {len(users)}
""")

def print_help():
    """–ü–æ–∫–∞–∑—É—î –¥–æ–≤—ñ–¥–∫—É –ø–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—é —Å–∫—Ä–∏–ø—Ç–∞"""
    print("""
üìß –°–∫—Ä–∏–ø—Ç –¥–ª—è —Ä—É—á–Ω–æ—ó –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å

üîß –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è:

1. –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑–∞ Telegram ID:
   python send_manual_message.py send <telegram_id> "<message>"
   python send_manual_message.py send_file <telegram_id> <file_path>
   
2. –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑–∞ username:
   python send_manual_message.py send_by_username <username> "<message>"
   python send_manual_message.py send_file_by_username <username> <file_path>
   
3. –ü–æ–∫–∞–∑–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤:
   python send_manual_message.py list [limit] [active_only]
   
4. –†–æ–∑—Å–∏–ª–∫–∞ –≤—Å—ñ–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º:
   python send_manual_message.py broadcast "<message>" [active_only]
   python send_manual_message.py broadcast_file <file_path> [active_only]

üìù –ü—Ä–∏–∫–ª–∞–¥–∏:

python send_manual_message.py send 123456789 "–ü—Ä–∏–≤—ñ—Ç! –¶–µ —Ç–µ—Å—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è"
python send_manual_message.py send_file 123456789 test_message.txt
python send_manual_message.py send_by_username johndoe "–ü—Ä–∏–≤—ñ—Ç, –î–∂–æ–Ω!"
python send_manual_message.py send_file_by_username johndoe test_message.txt
python send_manual_message.py list 10 true
python send_manual_message.py broadcast "–í–∞–∂–ª–∏–≤–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–ª—è –≤—Å—ñ—Ö!" true
python send_manual_message.py broadcast_file test_message.txt true

üí° –ü—ñ–¥–∫–∞–∑–∫–∏:
- –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—ñ–¥—Ç—Ä–∏–º—É—é—Ç—å HTML —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è
- –î–ª—è —Ä–æ–∑—Å–∏–ª–∫–∏ –±—É–¥–µ –∑–∞–ø–∏—Ç –Ω–∞ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
- active_only: true/false (–∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º true –¥–ª—è —Ä–æ–∑—Å–∏–ª–∫–∏)
- –§–∞–π–ª–∏ –º–∞—é—Ç—å –±—É—Ç–∏ –≤ UTF-8 –∫–æ–¥—É–≤–∞–Ω–Ω—ñ
""")

if __name__ == "__main__":
    if len(sys.argv) < 2:
        print_help()
        sys.exit(1)
    
    command = sys.argv[1]
    
    if command == "send":
        if len(sys.argv) < 4:
            print("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –∞—Ä–≥—É–º–µ–Ω—Ç—ñ–≤ –¥–ª—è –∫–æ–º–∞–Ω–¥–∏ send")
            print("–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: python send_manual_message.py send <telegram_id> \"<message>\"")
            sys.exit(1)
        
        user_id = sys.argv[2]
        message = sys.argv[3]
        
        print(f"üì§ –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {user_id}...")
        asyncio.run(send_message_to_user(user_id, message))
    
    elif command == "send_file":
        if len(sys.argv) < 4:
            print("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –∞—Ä–≥—É–º–µ–Ω—Ç—ñ–≤ –¥–ª—è –∫–æ–º–∞–Ω–¥–∏ send_file")
            print("–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: python send_manual_message.py send_file <telegram_id> <file_path>")
            sys.exit(1)
        
        user_id = sys.argv[2]
        file_path = sys.argv[3]
        
        message = read_message_from_file(file_path)
        if message.startswith("‚ùå"):
            print(message)
            sys.exit(1)
        
        print(f"üì§ –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ —Ñ–∞–π–ª—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {user_id}...")
        asyncio.run(send_message_to_user(user_id, message))
    
    elif command == "send_by_username":
        if len(sys.argv) < 4:
            print("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –∞—Ä–≥—É–º–µ–Ω—Ç—ñ–≤ –¥–ª—è –∫–æ–º–∞–Ω–¥–∏ send_by_username")
            print("–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: python send_manual_message.py send_by_username <username> \"<message>\"")
            sys.exit(1)
        
        username = sys.argv[2].replace("@", "")  # –í–∏–¥–∞–ª—è—î–º–æ @ —è–∫—â–æ —î
        message = sys.argv[3]
        
        print(f"üì§ –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É @{username}...")
        asyncio.run(send_message_by_username(username, message))
    
    elif command == "send_file_by_username":
        if len(sys.argv) < 4:
            print("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –∞—Ä–≥—É–º–µ–Ω—Ç—ñ–≤ –¥–ª—è –∫–æ–º–∞–Ω–¥–∏ send_file_by_username")
            print("–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: python send_manual_message.py send_file_by_username <username> <file_path>")
            sys.exit(1)
        
        username = sys.argv[2].replace("@", "")  # –í–∏–¥–∞–ª—è—î–º–æ @ —è–∫—â–æ —î
        file_path = sys.argv[3]
        
        message = read_message_from_file(file_path)
        if message.startswith("‚ùå"):
            print(message)
            sys.exit(1)
        
        print(f"üì§ –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ —Ñ–∞–π–ª—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É @{username}...")
        asyncio.run(send_message_by_username(username, message))
    
    elif command == "list":
        limit = int(sys.argv[2]) if len(sys.argv) > 2 else 20
        active_only = sys.argv[3].lower() in ['true', '1', 'yes'] if len(sys.argv) > 3 else False
        
        asyncio.run(list_users(limit, active_only))
    
    elif command == "broadcast":
        if len(sys.argv) < 3:
            print("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –∞—Ä–≥—É–º–µ–Ω—Ç—ñ–≤ –¥–ª—è –∫–æ–º–∞–Ω–¥–∏ broadcast")
            print("–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: python send_manual_message.py broadcast \"<message>\" [active_only]")
            sys.exit(1)
        
        message = sys.argv[2]
        active_only = sys.argv[3].lower() in ['true', '1', 'yes'] if len(sys.argv) > 3 else True
        
        asyncio.run(send_broadcast_message(message, active_only))
    
    elif command == "broadcast_file":
        if len(sys.argv) < 3:
            print("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –∞—Ä–≥—É–º–µ–Ω—Ç—ñ–≤ –¥–ª—è –∫–æ–º–∞–Ω–¥–∏ broadcast_file")
            print("–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: python send_manual_message.py broadcast_file <file_path> [active_only]")
            sys.exit(1)
        
        file_path = sys.argv[2]
        active_only = sys.argv[3].lower() in ['true', '1', 'yes'] if len(sys.argv) > 3 else True
        
        message = read_message_from_file(file_path)
        if message.startswith("‚ùå"):
            print(message)
            sys.exit(1)
        
        asyncio.run(send_broadcast_message(message, active_only))
    
    elif command == "help":
        print_help()
    
    else:
        print(f"‚ùå –ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞: {command}")
        print("–í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ 'help' –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–æ–≤—ñ–¥–∫–∏")
        sys.exit(1)