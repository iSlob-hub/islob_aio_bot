#!/usr/bin/env python3
"""
–ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —Ç–µ—Å—Ç–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö –¥–ª—è —Å—Ü–µ–Ω–∞—Ä—ñ—é 5:
–î—É–∂–µ —Ö–æ—Ä–æ—à—ñ –ø–æ–∫–∞–∑–Ω–∏–∫–∏ –ø–æ —Å–Ω—É —Ç–∞ —Å–∞–º–æ–ø–æ—á—É—Ç—Ç—é, –Ω–∏–∑—å–∫–∏–π —Å—Ç—Ä–µ—Å, –∞–ª–µ —Å–ª–∞–±–∫—ñ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è 
—ñ –∑–∞–Ω–∞–¥—Ç–æ —à–≤–∏–¥–∫–∏–π –Ω–∞–±—ñ—Ä –≤–∞–≥–∏.
–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –¥–ª—è –ø–æ—Ö–≤–∞–ª–∏ —Å–∏–ª—å–Ω–∏—Ö —Å—Ç–æ—Ä—ñ–Ω (—Å–æ–Ω, –µ–Ω–µ—Ä–≥—ñ—è), –∞–ª–µ –∫—Ä–∏—Ç–∏–∫–∏ –≤–∞–≥–∏/—Ç—Ä–µ–Ω—É–≤–∞–Ω—å.
"""

import asyncio
from datetime import datetime, timedelta
from app.db.database import init_db
from app.db.models import (
    User, MorningQuiz, TrainingSession, UserStatistics, 
    PeriodType, TrainingGoal
)
from zoneinfo import ZoneInfo

async def create_good_recovery_weak_training_scenario():
    """
    –°—Ü–µ–Ω–∞—Ä—ñ–π 5: –•–æ—Ä–æ—à—ñ –ø–æ–∫–∞–∑–Ω–∏–∫–∏ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è –∞–ª–µ —Å–ª–∞–±–∫—ñ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è
    –í—ñ–¥–º—ñ–Ω–Ω–∏–π —Å–æ–Ω/—Å–∞–º–æ–ø–æ—á—É—Ç—Ç—è, –Ω–∏–∑—å–∫–∏–π —Å—Ç—Ä–µ—Å, —Å–ª–∞–±–∫—ñ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è, —à–≤–∏–¥–∫–∏–π –Ω–∞–±—ñ—Ä –≤–∞–≥–∏
    """
    await init_db()
    
    test_user_id = "good_recovery_weak_training_user"
    
    # –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑ —Ü—ñ–ª–ª—é —Å—Ö—É–¥–Ω–µ–Ω–Ω—è (–∞–ª–µ –Ω–∞–±–∏—Ä–∞—î –≤–∞–≥—É)
    test_user = User(
        telegram_id=test_user_id,
        full_name="–•–æ—Ä–æ—à–µ –í—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è –°–ª–∞–±–∫—ñ –¢—Ä–µ–Ω—É–≤–∞–Ω–Ω—è",
        telegram_username="good_recovery_weak_training",
        is_active=True,
        is_verified=True,
        training_goal=TrainingGoal.LOSE_WEIGHT
    )
    await test_user.save()
    print(f"‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: {test_user.full_name}")
    
    # –ü–µ—Ä—ñ–æ–¥ (22 –≤–µ—Ä–µ—Å–Ω—è 2025, 21:36)
    start_date = datetime(2025, 6, 12, 21, 9, tzinfo=ZoneInfo("Europe/Kyiv"))
    
    # –î–∞–Ω—ñ –¥–ª—è —Ö–æ—Ä–æ—à–æ–≥–æ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è –∞–ª–µ —Å–ª–∞–±–∫–∏—Ö —Ç—Ä–µ–Ω—É–≤–∞–Ω—å (7 –¥–Ω—ñ–≤)
    daily_data = [
        # –î–µ–Ω—å 1 - –≤—ñ–¥–º—ñ–Ω–Ω–∏–π —Å—Ç–∞—Ä—Ç –∑ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è–º
        {"stress": 2, "sleep": 8.5, "wellbeing": 8, "training": 4, "weight": 68.0},
        # –î–µ–Ω—å 2 - –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è —Ö–æ—Ä–æ—à–æ–≥–æ —Å–Ω—É, –∞–ª–µ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è —Å–ª–∞–±–∫—ñ
        {"stress": 1, "sleep": 9.0, "wellbeing": 9, "training": 3, "weight": 68.4},
        # –î–µ–Ω—å 3 - —ñ–¥–µ–∞–ª—å–Ω–µ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è, –º—ñ–Ω—ñ–º–∞–ª—å–Ω—ñ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è
        {"stress": 2, "sleep": 8.0, "wellbeing": 8, "training": 4, "weight": 68.7},
        # –î–µ–Ω—å 4 - —Å—Ç—Ä–µ—Å –º—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π, —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –Ω–µ –ø–æ–∫—Ä–∞—â—É—é—Ç—å—Å—è
        {"stress": 1, "sleep": 8.5, "wellbeing": 9, "training": 3, "weight": 69.0},
        # –î–µ–Ω—å 5 - –≤—ñ–¥–ø–æ—á–∏–Ω–æ–∫ –≤—ñ–¥–º—ñ–Ω–Ω–∏–π, –∞–ª–µ –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å –Ω–∏–∑—å–∫–∞
        {"stress": 3, "sleep": 8.0, "wellbeing": 7, "training": 5, "weight": 69.3},
        # –î–µ–Ω—å 6 - —Å–æ–Ω —ñ–¥–µ–∞–ª—å–Ω–∏–π, —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –ø—Ä–æ–ø—É—Å–∫–∞—î
        {"stress": 2, "sleep": 9.0, "wellbeing": 8, "training": 2, "weight": 69.5},
        # –î–µ–Ω—å 7 - –µ–Ω–µ—Ä–≥—ñ—è —î, –∞–ª–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î –ø–æ–≥–∞–Ω–æ
        {"stress": 2, "sleep": 8.5, "wellbeing": 8, "training": 4, "weight": 69.8}
    ]
    
    training_sessions_count = 0
    morning_quizzes_count = 0
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ –¥–∞–Ω—ñ –ø–æ –¥–Ω—è—Ö
    for day, data in enumerate(daily_data):
        current_date = start_date + timedelta(days=day)
        
        # –†–∞–Ω–∫–æ–≤—ñ –∫–≤—ñ–∑–∏ –∑ —à–≤–∏–¥–∫–∏–º –Ω–∞–±–æ—Ä–æ–º –≤–∞–≥–∏
        morning_quiz = MorningQuiz(
            user_id=test_user_id,
            how_do_you_feel_today=data["wellbeing"],
            how_many_hours_of_sleep=data["sleep"],
            weight=data["weight"],
            is_going_to_gym=data["training"] > 2,
            gym_attendance_time=current_date.replace(hour=17, minute=0) if data["training"] > 2 else None,
            completed=True,
            created_at=current_date.replace(hour=8, minute=30)
        )
        await morning_quiz.save()
        morning_quizzes_count += 1
        
        # –°–ª–∞–±–∫—ñ —Ç—Ä–µ–Ω—É–≤–∞–ª—å–Ω—ñ —Å–µ—Å—ñ—ó (–±–∞–≥–∞—Ç–æ –ø—Ä–æ–ø—É—Å–∫—ñ–≤)
        if data["training"] > 2:  # –ü—Ä–æ–ø—É—Å–∫–∞—î –¥—É–∂–µ —Å–ª–∞–±–∫—ñ –¥–Ω—ñ
            training_session = TrainingSession(
                user_id=test_user_id,
                how_do_you_feel_before=data["wellbeing"],
                how_hard_was_training=data["training"],
                do_you_have_any_pain=False,
                training_started_at=current_date.replace(hour=17, minute=0),
                training_ended_at=current_date.replace(hour=17, minute=45),  # –ö–æ—Ä–æ—Ç–∫—ñ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è
                training_duration=45,  # –¢—ñ–ª—å–∫–∏ 45 —Ö–≤–∏–ª–∏–Ω
                stress_level=data["stress"],
                do_you_have_soreness=False,  # –ù–µ–º–∞—î –±–æ–ª—é—á–æ—Å—Ç—ñ - —Å–ª–∞–±–∫—ñ –Ω–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
                completed=True,
                created_at=current_date.replace(hour=17, minute=0)
            )
            await training_session.save()
            training_sessions_count += 1
    
    print(f"‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ {morning_quizzes_count} —Ä–∞–Ω–∫–æ–≤–∏—Ö –∫–≤—ñ–∑—ñ–≤")
    print(f"‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ {training_sessions_count} —Ç—Ä–µ–Ω—É–≤–∞–ª—å–Ω–∏—Ö —Å–µ—Å—ñ–π (–ø—Ä–æ–ø—É—â–µ–Ω–æ {7-training_sessions_count})")
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    end_date = start_date + timedelta(days=6, hours=23, minutes=59, seconds=59)
    
    # –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ –º–µ—Ç—Ä–∏–∫–∏
    stress_avg = sum(d["stress"] for d in daily_data) / len(daily_data)  # 1.9
    sleep_avg = sum(d["sleep"] for d in daily_data) / len(daily_data)    # 8.5
    wellbeing_avg = sum(d["wellbeing"] for d in daily_data) / len(daily_data)  # 8.1
    training_avg = sum(d["training"] for d in daily_data) / len(daily_data)    # 3.6
    
    start_weight = daily_data[0]["weight"]
    end_weight = daily_data[-1]["weight"]
    weight_change = end_weight - start_weight  # +1.8
    
    user_statistics = UserStatistics(
        user_id=test_user_id,
        period_type=PeriodType.WEEKLY,
        period_start=start_date,
        period_end=end_date,
        total_training_sessions=training_sessions_count,
        total_morning_quizzes=morning_quizzes_count,
        
        # –°—Ç—Ä–µ—Å: –º—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π 1.9, —ñ–¥–µ–∞–ª—å–Ω–∏–π
        stress_data={
            "chart_type": "line",
            "average": 1.9,
            "trend": "excellent",
            "data_points": [
                {"date": (start_date + timedelta(days=i)).strftime("%Y-%m-%d"), "value": daily_data[i]["stress"]}
                for i in range(len(daily_data))
            ]
        },
        
        # –¢—Ä–µ–Ω—É–≤–∞–Ω–Ω—è: —Å–ª–∞–±–∫—ñ 3.6, –±–∞–≥–∞—Ç–æ –ø—Ä–æ–ø—É—Å–∫—ñ–≤
        warehouse_data={
            "chart_type": "bar",
            "average": 3.6,
            "trend": "weak",
            "data_points": [
                {"date": (start_date + timedelta(days=i)).strftime("%Y-%m-%d"), "value": daily_data[i]["training"]}
                for i in range(len(daily_data))
            ]
        },
        
        # –°–æ–Ω: –í–Ü–î–ú–Ü–ù–ù–ò–ô 8.5 –≥–æ–¥–∏–Ω, —Å—Ç–∞–±—ñ–ª—å–Ω–æ –≤–∏—Å–æ–∫–∏–π
        sleep_data={
            "chart_type": "line",
            "average": 8.5,
            "trend": "excellent",
            "total_sleep_hours": sum(d["sleep"] for d in daily_data),
            "data_points": [
                {"date": (start_date + timedelta(days=i)).strftime("%Y-%m-%d"), "value": daily_data[i]["sleep"]}
                for i in range(len(daily_data))
            ]
        },
        
        # –°–∞–º–æ–ø–æ—á—É—Ç—Ç—è: –í–Ü–î–ú–Ü–ù–ù–ï 8.1, —Å—Ç–∞–±—ñ–ª—å–Ω–æ –≤–∏—Å–æ–∫–µ
        wellbeing_data={
            "chart_type": "line",
            "average": 8.1,
            "trend": "excellent",
            "data_points": [
                {"date": (start_date + timedelta(days=i)).strftime("%Y-%m-%d"), "value": daily_data[i]["wellbeing"]}
                for i in range(len(daily_data))
            ]
        },
        
        # –í–∞–≥–∞: –®–í–ò–î–ö–ò–ô –Ω–∞–±—ñ—Ä +1.8 –∫–≥ (–ø—Ä–æ–±–ª–µ–º–∞ –ø—Ä–∏ —Ü—ñ–ª—ñ —Å—Ö—É–¥–Ω–µ–Ω–Ω—è)
        weight_data={
            "chart_type": "line",
            "average": round((start_weight + end_weight) / 2, 1),
            "trend": "rapid_gain",
            "start_weight": start_weight,
            "end_weight": end_weight,
            "weight_change": round(weight_change, 1),
            "data_points": [
                {"date": (start_date + timedelta(days=i)).strftime("%Y-%m-%d"), "value": daily_data[i]["weight"]}
                for i in range(len(daily_data))
            ]
        },
        
        is_complete=True,
        generated_at=datetime.now(ZoneInfo("Europe/Kyiv"))
    )
    
    await user_statistics.save()
    print(f"‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è per√≠o–¥—É {start_date.date()} - {end_date.date()}")
    
    # –í–∏–≤–æ–¥–∏–º–æ –ø—ñ–¥—Å—É–º–æ–∫
    print(f"""
üìä –°—Ü–µ–Ω–∞—Ä—ñ–π 5 - –•–æ—Ä–æ—à–µ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è –∞–ª–µ —Å–ª–∞–±–∫—ñ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è:
üßò‚Äç‚ôÇÔ∏è –°–µ—Ä–µ–¥–Ω—ñ–π —Å—Ç—Ä–µ—Å: {stress_avg:.1f} (–ú–Ü–ù–Ü–ú–ê–õ–¨–ù–ò–ô, —ñ–¥–µ–∞–ª—å–Ω–æ)
üí™ –°–∫–ª–∞–¥–Ω—ñ—Å—Ç—å —Ç—Ä–µ–Ω—É–≤–∞–Ω—å: {training_avg:.1f} (–°–õ–ê–ë–ö–Ü, –±–∞–≥–∞—Ç–æ –ø—Ä–æ–ø—É—Å–∫—ñ–≤)
üò¥ –°–µ—Ä–µ–¥–Ω—ñ–π —Å–æ–Ω: {sleep_avg:.1f} –≥–æ–¥–∏–Ω (–í–Ü–î–ú–Ü–ù–ù–ò–ô)
üòÑ –ó–∞–≥–∞–ª—å–Ω–µ —Å–∞–º–æ–ø–æ—á—É—Ç—Ç—è: {wellbeing_avg:.1f} (–í–Ü–î–ú–Ü–ù–ù–ï, –±–∞–≥–∞—Ç–æ –µ–Ω–µ—Ä–≥—ñ—ó)
üî• –ó–º—ñ–Ω–∞ –≤–∞–≥–∏: +{weight_change:.1f} –∫–≥ (–®–í–ò–î–ö–ò–ô –ù–ê–ë–Ü–† –ø—Ä–∏ —Ü—ñ–ª—ñ —Å—Ö—É–¥–Ω–µ–Ω–Ω—è)
üéØ –¶—ñ–ª—å: {test_user.training_goal.value}

–û—á—ñ–∫—É–≤–∞–Ω–∏–π –∞–Ω–∞–ª—ñ–∑: –ø–æ—Ö–≤–∞–ª–∞ —Å–∏–ª—å–Ω–∏—Ö —Å—Ç–æ—Ä—ñ–Ω (—Å–æ–Ω, –µ–Ω–µ—Ä–≥—ñ—è, –≤—ñ–¥—Å—É—Ç–Ω—ñ—Å—Ç—å —Å—Ç—Ä–µ—Å—É)
+ –∫—Ä–∏—Ç–∏–∫–∞ —Å–ª–∞–±–∫–∏—Ö —Ç—Ä–µ–Ω—É–≤–∞–Ω—å —ñ —à–≤–∏–¥–∫–æ–≥–æ –Ω–∞–±–æ—Ä—É –≤–∞–≥–∏
""")

if __name__ == "__main__":
    print("–ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —Ç–µ—Å—Ç–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö –¥–ª—è –°—Ü–µ–Ω–∞—Ä—ñ—é 5 (–•–æ—Ä–æ—à–µ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è –∞–ª–µ —Å–ª–∞–±–∫—ñ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è)...")
    asyncio.run(create_good_recovery_weak_training_scenario())
    print("‚úÖ –°—Ü–µ–Ω–∞—Ä—ñ–π 5 –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")